// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/liquidstaking/v1/liquidstaking.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChunkStatus defines the status of the chunk.
type ChunkStatus int32

const (
	CHUNK_STATUS_UNSPECIFIED ChunkStatus = 0
	// Default status of a chunk when a msgServer receives MsgLiquidStake.
	// This status indicates that the chunk is ready to be paired
	// with an insurance.
	CHUNK_STATUS_PAIRING ChunkStatus = 1
	// This status indicates that the chunk is paired with an insurance
	// which has the lowest fee rate.
	CHUNK_STATUS_PAIRED ChunkStatus = 2
	// For various reasons, the insurance paired to Chunk can be un-paired.
	// At this time, if there is no insurance candidate,
	// a chunk enters this status.
	CHUNK_STATUS_UNPAIRING_FOR_REPAIRING ChunkStatus = 3
	// When a delegator(= liquid staker) sends a MsgLiquidUnstake, the last ranked
	// paired chunk enters this status and waits until the un-bonding period times
	// out.
	CHUNK_STATUS_UNPAIRING_FOR_UNSTAKE ChunkStatus = 4
)

var ChunkStatus_name = map[int32]string{
	0: "CHUNK_STATUS_UNSPECIFIED",
	1: "CHUNK_STATUS_PAIRING",
	2: "CHUNK_STATUS_PAIRED",
	3: "CHUNK_STATUS_UNPAIRING_FOR_REPAIRING",
	4: "CHUNK_STATUS_UNPAIRING_FOR_UNSTAKE",
}

var ChunkStatus_value = map[string]int32{
	"CHUNK_STATUS_UNSPECIFIED":             0,
	"CHUNK_STATUS_PAIRING":                 1,
	"CHUNK_STATUS_PAIRED":                  2,
	"CHUNK_STATUS_UNPAIRING_FOR_REPAIRING": 3,
	"CHUNK_STATUS_UNPAIRING_FOR_UNSTAKE":   4,
}

func (x ChunkStatus) String() string {
	return proto.EnumName(ChunkStatus_name, int32(x))
}

func (ChunkStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}

// InsuranceStatus defines the status of the insurance.
type InsuranceStatus int32

const (
	INSURANCE_STATUS_UNSPECIFIED InsuranceStatus = 0
	// Default status of an insurance when a msgServer receives
	// MsgInsuranceProvide. This status indicates that
	// the insurance is ready to be paired with a chunk.
	INSURANCE_STATUS_PAIRING InsuranceStatus = 1
	// This status indicates that the insurance is paired with a chunk.
	// While the insurance is in this status, it serves as a form of protection
	// for the chunk by insuring it against unexpected loss that may occur due to
	// validator slashing.
	INSURANCE_STATUS_PAIRED InsuranceStatus = 2
	// For various reasons, the insurance paired to Chunk can enters this status.
	// The insurance in this status wait until
	// the paired chunk's un-bonding period times out.
	INSURANCE_STATUS_UNPAIRING_FOR_REPAIRING InsuranceStatus = 3
	// Insurance enters this status when msgServer receives MsgWithdrawInsurance.
	// The insurance waits until the paired chunk's un-bonding period times out.
	INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAW InsuranceStatus = 4
	// Every begin block, the module checks all insurances have enough balance to
	// cover slash. If not, the insurance enters this status. Insurance provider
	// can re-fill token amount of the insurance by sending MsgRefillInsurance or
	// cancel the insurance by sending MsgCancelInsuranceProvide.
	INSURANCE_STATUS_VULNERABLE InsuranceStatus = 5
)

var InsuranceStatus_name = map[int32]string{
	0: "INSURANCE_STATUS_UNSPECIFIED",
	1: "INSURANCE_STATUS_PAIRING",
	2: "INSURANCE_STATUS_PAIRED",
	3: "INSURANCE_STATUS_UNPAIRING_FOR_REPAIRING",
	4: "INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAW",
	5: "INSURANCE_STATUS_VULNERABLE",
}

var InsuranceStatus_value = map[string]int32{
	"INSURANCE_STATUS_UNSPECIFIED":             0,
	"INSURANCE_STATUS_PAIRING":                 1,
	"INSURANCE_STATUS_PAIRED":                  2,
	"INSURANCE_STATUS_UNPAIRING_FOR_REPAIRING": 3,
	"INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAW":  4,
	"INSURANCE_STATUS_VULNERABLE":              5,
}

func (x InsuranceStatus) String() string {
	return proto.EnumName(InsuranceStatus_name, int32(x))
}

func (InsuranceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}

// Epoch defines the epoch of the module.
type Epoch struct {
	CurrentNumber       uint64        `protobuf:"varint,1,opt,name=current_number,json=currentNumber,proto3" json:"current_number,omitempty"`
	EpochStartTime      time.Time     `protobuf:"bytes,2,opt,name=epoch_start_time,json=epochStartTime,proto3,stdtime" json:"epoch_start_time"`
	EpochDuration       time.Duration `protobuf:"bytes,3,opt,name=epoch_duration,json=epochDuration,proto3,stdduration" json:"epoch_duration"`
	EpochStartHeight    int64         `protobuf:"varint,4,opt,name=epoch_start_height,json=epochStartHeight,proto3" json:"epoch_start_height,omitempty"`
	EpochChunkSize      uint64        `protobuf:"varint,5,opt,name=epoch_chunk_size,json=epochChunkSize,proto3" json:"epoch_chunk_size,omitempty"`
	EpochMaxPairedChunk uint64        `protobuf:"varint,6,opt,name=epoch_max_paired_chunk,json=epochMaxPairedChunk,proto3" json:"epoch_max_paired_chunk,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetCurrentNumber() uint64 {
	if m != nil {
		return m.CurrentNumber
	}
	return 0
}

func (m *Epoch) GetEpochStartTime() time.Time {
	if m != nil {
		return m.EpochStartTime
	}
	return time.Time{}
}

func (m *Epoch) GetEpochDuration() time.Duration {
	if m != nil {
		return m.EpochDuration
	}
	return 0
}

func (m *Epoch) GetEpochStartHeight() int64 {
	if m != nil {
		return m.EpochStartHeight
	}
	return 0
}

func (m *Epoch) GetEpochChunkSize() uint64 {
	if m != nil {
		return m.EpochChunkSize
	}
	return 0
}

func (m *Epoch) GetEpochMaxPairedChunk() uint64 {
	if m != nil {
		return m.EpochMaxPairedChunk
	}
	return 0
}

// Params defines the parameters for the module.
type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Chunk defines the chunk of the module.
type Chunk struct {
	// Id of the chunk
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Id of Paired insurance, 0 means no insurance
	InsuranceId uint64 `protobuf:"varint,2,opt,name=insurance_id,json=insuranceId,proto3" json:"insurance_id,omitempty"`
	// Status of the chunk
	Status ChunkStatus `protobuf:"varint,3,opt,name=status,proto3,enum=canto.liquidstaking.v1.ChunkStatus" json:"status,omitempty"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{2}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return m.Size()
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

// Insurance defines the insurance of the module.
type Insurance struct {
	// Id of the insurance
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address of the validator
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Address of the insurance provider
	ProviderAddress string `protobuf:"bytes,3,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	// Fee rate of the insurance
	FeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=fee_rate,json=feeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_rate"`
	// Id of Paired chunk, 0 means no chunk
	ChunkId uint64 `protobuf:"varint,5,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// Status of the insurance
	Status InsuranceStatus `protobuf:"varint,6,opt,name=status,proto3,enum=canto.liquidstaking.v1.InsuranceStatus" json:"status,omitempty"`
}

func (m *Insurance) Reset()         { *m = Insurance{} }
func (m *Insurance) String() string { return proto.CompactTextString(m) }
func (*Insurance) ProtoMessage()    {}
func (*Insurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{3}
}
func (m *Insurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Insurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Insurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Insurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Insurance.Merge(m, src)
}
func (m *Insurance) XXX_Size() int {
	return m.Size()
}
func (m *Insurance) XXX_DiscardUnknown() {
	xxx_messageInfo_Insurance.DiscardUnknown(m)
}

var xxx_messageInfo_Insurance proto.InternalMessageInfo

// NetAmountState is type for net amount raw data and mint rate, This is a value
// that depends on the several module state every time, so it is used only for
// calculation and query and is not stored in kv.
type NetAmountState struct {
	// Calculated by (total supply of ls tokens) / NetAmount
	MintRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=mint_rate,json=mintRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_rate"`
	// Total supply of ls tokens
	// e.g. 100 ls tokens minted -> 10 ls tokens burned, then total supply is 90
	// ls tokens
	LsTokensTotalSupply github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=ls_tokens_total_supply,json=lsTokensTotalSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ls_tokens_total_supply"`
	// Calculated by reward module account's native token balance + all paired
	// chunk's native token balance + all delegation tokens of paired chunks
	// last Epoch + all unbonding delegation tokens of unpairing chunks
	NetAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=net_amount,json=netAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"net_amount"`
	// Total shares of all paired chunks
	TotalDelShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=total_del_shares,json=totalDelShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_del_shares"`
	// The cumulative reward of all chunks delegations from the last distribution
	TotalRemainingRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=total_remaining_rewards,json=totalRemainingRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_remaining_rewards"`
	// Sum of the balances of all chunks.
	// Note: Paired chunks can be pairing status for various reasons (such as lack
	// of insurance). In such cases, the delegated native tokens returns to the
	// balance of DerivedAddress(Chunk.Id) after un-bonding period is finished.
	TotalChunksBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=total_chunks_balance,json=totalChunksBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_chunks_balance"`
	// The token amount worth of all delegation shares of all paired chunks
	// (slashing applied amount)
	TotalLiquidTokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=total_liquid_tokens,json=totalLiquidTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_liquid_tokens"`
	// The sum of all paired insurances' amount (=
	// DerivedAddress(Insurance.Id).Balance)
	TotalInsuranceTokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=total_insurance_tokens,json=totalInsuranceTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_insurance_tokens"`
	// The sum of unbonding balance of all chunks in UnpairingForRepairing and
	// UnpairingForUnstake
	TotalUnbondingBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=total_unbonding_balance,json=totalUnbondingBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_unbonding_balance"`
	// Balance of reward module account
	RewardModuleAccBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=reward_module_acc_balance,json=rewardModuleAccBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reward_module_acc_balance"`
}

func (m *NetAmountState) Reset()      { *m = NetAmountState{} }
func (*NetAmountState) ProtoMessage() {}
func (*NetAmountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{4}
}
func (m *NetAmountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetAmountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetAmountState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetAmountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetAmountState.Merge(m, src)
}
func (m *NetAmountState) XXX_Size() int {
	return m.Size()
}
func (m *NetAmountState) XXX_DiscardUnknown() {
	xxx_messageInfo_NetAmountState.DiscardUnknown(m)
}

var xxx_messageInfo_NetAmountState proto.InternalMessageInfo

// LiquidUnstakeUnbondingDelegationInfo is created when liquid unstaker requests
// a MsgLiquidUnstake. It exists to burn ls tokens in the amount calculated at
// the mint rate at the time of the request, before returning native tokens that
// have been bound since the end of the unbonding period.
type LiquidUnstakeUnbondingDelegationInfo struct {
	// The id of chunk in UnpairingForUnstake status.
	ChunkId uint64 `protobuf:"varint,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// The address of liquid unstaker
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// The address of the validator
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// The amount of ls tokens to be burned
	// This is calculated by the mint rate at the time of the request
	BurnAmount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=burn_amount,json=burnAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"burn_amount"`
	// The unix time for unbonding completion
	CompletionTime time.Time `protobuf:"bytes,5,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
}

func (m *LiquidUnstakeUnbondingDelegationInfo) Reset()         { *m = LiquidUnstakeUnbondingDelegationInfo{} }
func (m *LiquidUnstakeUnbondingDelegationInfo) String() string { return proto.CompactTextString(m) }
func (*LiquidUnstakeUnbondingDelegationInfo) ProtoMessage()    {}
func (*LiquidUnstakeUnbondingDelegationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{5}
}
func (m *LiquidUnstakeUnbondingDelegationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidUnstakeUnbondingDelegationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidUnstakeUnbondingDelegationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidUnstakeUnbondingDelegationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidUnstakeUnbondingDelegationInfo.Merge(m, src)
}
func (m *LiquidUnstakeUnbondingDelegationInfo) XXX_Size() int {
	return m.Size()
}
func (m *LiquidUnstakeUnbondingDelegationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidUnstakeUnbondingDelegationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidUnstakeUnbondingDelegationInfo proto.InternalMessageInfo

func (m *LiquidUnstakeUnbondingDelegationInfo) GetChunkId() uint64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *LiquidUnstakeUnbondingDelegationInfo) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *LiquidUnstakeUnbondingDelegationInfo) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *LiquidUnstakeUnbondingDelegationInfo) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

// WithdrawalInsurance is created when insurance provider requests a
// MsgWithdrawInsurance. Actual withdrawal is done after completion_time.
type WithdrawingInsurance struct {
	// Id of the insurance
	InsuranceId uint64 `protobuf:"varint,1,opt,name=insurance_id,json=insuranceId,proto3" json:"insurance_id,omitempty"`
	// Id of the chunk
	ChunkId uint64 `protobuf:"varint,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// The unix time for unbonding completion
	// Insurance is withdrawn after completion_time
	CompletionTime time.Time `protobuf:"bytes,3,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
}

func (m *WithdrawingInsurance) Reset()         { *m = WithdrawingInsurance{} }
func (m *WithdrawingInsurance) String() string { return proto.CompactTextString(m) }
func (*WithdrawingInsurance) ProtoMessage()    {}
func (*WithdrawingInsurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{6}
}
func (m *WithdrawingInsurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawingInsurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawingInsurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawingInsurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawingInsurance.Merge(m, src)
}
func (m *WithdrawingInsurance) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawingInsurance) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawingInsurance.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawingInsurance proto.InternalMessageInfo

func (m *WithdrawingInsurance) GetInsuranceId() uint64 {
	if m != nil {
		return m.InsuranceId
	}
	return 0
}

func (m *WithdrawingInsurance) GetChunkId() uint64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *WithdrawingInsurance) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("canto.liquidstaking.v1.ChunkStatus", ChunkStatus_name, ChunkStatus_value)
	proto.RegisterEnum("canto.liquidstaking.v1.InsuranceStatus", InsuranceStatus_name, InsuranceStatus_value)
	proto.RegisterType((*Epoch)(nil), "canto.liquidstaking.v1.Epoch")
	proto.RegisterType((*Params)(nil), "canto.liquidstaking.v1.Params")
	proto.RegisterType((*Chunk)(nil), "canto.liquidstaking.v1.Chunk")
	proto.RegisterType((*Insurance)(nil), "canto.liquidstaking.v1.Insurance")
	proto.RegisterType((*NetAmountState)(nil), "canto.liquidstaking.v1.NetAmountState")
	proto.RegisterType((*LiquidUnstakeUnbondingDelegationInfo)(nil), "canto.liquidstaking.v1.LiquidUnstakeUnbondingDelegationInfo")
	proto.RegisterType((*WithdrawingInsurance)(nil), "canto.liquidstaking.v1.WithdrawingInsurance")
}

func init() {
	proto.RegisterFile("canto/liquidstaking/v1/liquidstaking.proto", fileDescriptor_d5ab11aad71f7b33)
}

var fileDescriptor_d5ab11aad71f7b33 = []byte{
	// 1177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xda, 0xce, 0x1f, 0xbf, 0xb4, 0xae, 0x3b, 0x09, 0xa9, 0x93, 0x56, 0x76, 0x08, 0xa5,
	0x35, 0xfd, 0x63, 0xab, 0xad, 0x04, 0x52, 0x39, 0x20, 0xc7, 0x76, 0xc9, 0x92, 0xc4, 0x84, 0xb5,
	0x4d, 0x10, 0x07, 0x96, 0xf1, 0xee, 0xc4, 0x1e, 0x65, 0x77, 0xd6, 0xec, 0xce, 0x26, 0x69, 0x25,
	0xee, 0x39, 0xf6, 0xd8, 0x63, 0xa4, 0x7e, 0x07, 0x4e, 0x7c, 0x80, 0x1e, 0x7b, 0x03, 0x21, 0x54,
	0x50, 0x72, 0xe1, 0xc8, 0x47, 0x40, 0x3b, 0xb3, 0x6b, 0xc7, 0xb1, 0x03, 0xc4, 0x27, 0x67, 0xdf,
	0xfb, 0xcd, 0xef, 0xbd, 0xf7, 0x7b, 0x33, 0xef, 0x05, 0xee, 0x19, 0x98, 0x71, 0xa7, 0x64, 0xd1,
	0x1f, 0x7c, 0x6a, 0x7a, 0x1c, 0xef, 0x51, 0xd6, 0x29, 0xed, 0x3f, 0x1a, 0x36, 0x14, 0x7b, 0xae,
	0xc3, 0x1d, 0xb4, 0x28, 0xb0, 0xc5, 0x61, 0xd7, 0xfe, 0xa3, 0xe5, 0x85, 0x8e, 0xd3, 0x71, 0x04,
	0xa4, 0x14, 0xfc, 0x25, 0xd1, 0xcb, 0xb9, 0x8e, 0xe3, 0x74, 0x2c, 0x52, 0x12, 0x5f, 0x6d, 0x7f,
	0xb7, 0x64, 0xfa, 0x2e, 0xe6, 0xd4, 0x61, 0xa1, 0x3f, 0x7f, 0xde, 0xcf, 0xa9, 0x4d, 0x3c, 0x8e,
	0xed, 0x5e, 0x08, 0x58, 0x32, 0x1c, 0xcf, 0x76, 0x3c, 0x5d, 0x32, 0xcb, 0x0f, 0xe9, 0x5a, 0xfd,
	0x25, 0x0e, 0x53, 0xb5, 0x9e, 0x63, 0x74, 0xd1, 0x87, 0x90, 0x36, 0x7c, 0xd7, 0x25, 0x8c, 0xeb,
	0xcc, 0xb7, 0xdb, 0xc4, 0xcd, 0x2a, 0x2b, 0x4a, 0x21, 0xa9, 0x5d, 0x0d, 0xad, 0x75, 0x61, 0x44,
	0x75, 0xc8, 0x90, 0x00, 0xaf, 0x7b, 0x1c, 0xbb, 0x5c, 0x0f, 0x42, 0x65, 0xe3, 0x2b, 0x4a, 0x61,
	0xee, 0xf1, 0x72, 0x51, 0xe6, 0x51, 0x8c, 0xf2, 0x28, 0x36, 0xa3, 0x3c, 0xd6, 0x66, 0xdf, 0xbc,
	0xcb, 0xc7, 0x5e, 0xfe, 0x91, 0x57, 0xb4, 0xb4, 0x38, 0xdd, 0x08, 0x0e, 0x07, 0x6e, 0xf4, 0x05,
	0x48, 0x8b, 0x1e, 0x15, 0x95, 0x4d, 0x08, 0xb6, 0xa5, 0x11, 0xb6, 0x6a, 0x08, 0x90, 0x64, 0xaf,
	0x02, 0xb2, 0xab, 0xe2, 0x68, 0xe4, 0x40, 0x0f, 0x00, 0x9d, 0xcd, 0xad, 0x4b, 0x68, 0xa7, 0xcb,
	0xb3, 0xc9, 0x15, 0xa5, 0x90, 0xd0, 0x32, 0x83, 0xb8, 0xeb, 0xc2, 0x8e, 0x0a, 0x51, 0x25, 0x46,
	0xd7, 0x67, 0x7b, 0xba, 0x47, 0x5f, 0x90, 0xec, 0x94, 0x28, 0x59, 0x66, 0x54, 0x09, 0xcc, 0x0d,
	0xfa, 0x82, 0xa0, 0x27, 0xb0, 0x28, 0x91, 0x36, 0x3e, 0xd4, 0x7b, 0x98, 0xba, 0xc4, 0x94, 0x87,
	0xb2, 0xd3, 0x02, 0x3f, 0x2f, 0xbc, 0x5b, 0xf8, 0x70, 0x5b, 0xf8, 0xc4, 0xc1, 0xd5, 0x34, 0x4c,
	0x6f, 0x63, 0x17, 0xdb, 0xde, 0xd3, 0xe4, 0xd1, 0x71, 0x3e, 0xb6, 0xfa, 0x23, 0x4c, 0x09, 0x07,
	0x4a, 0x43, 0x9c, 0x9a, 0xa1, 0xb8, 0x71, 0x6a, 0xa2, 0xf7, 0xe1, 0x0a, 0x65, 0x9e, 0xef, 0x62,
	0x66, 0x10, 0x9d, 0x9a, 0x42, 0xcd, 0xa4, 0x36, 0xd7, 0xb7, 0xa9, 0x26, 0xfa, 0x14, 0xa6, 0x3d,
	0x8e, 0xb9, 0xef, 0x09, 0x71, 0xd2, 0x8f, 0x3f, 0x28, 0x8e, 0xbf, 0x40, 0x45, 0x99, 0xb3, 0x80,
	0x6a, 0xe1, 0x91, 0x30, 0xfc, 0x71, 0x1c, 0x52, 0x6a, 0x44, 0x39, 0x92, 0xc3, 0x7d, 0xb8, 0xbe,
	0x8f, 0x2d, 0x6a, 0x62, 0xee, 0xb8, 0x3a, 0x36, 0x4d, 0x97, 0x78, 0x9e, 0x48, 0x24, 0xa5, 0x65,
	0xfa, 0x8e, 0xb2, 0xb4, 0xa3, 0x8f, 0x20, 0xd3, 0x73, 0x9d, 0x7d, 0x6a, 0x92, 0x01, 0x36, 0x21,
	0xb0, 0xd7, 0x22, 0x7b, 0x04, 0x55, 0x61, 0x76, 0x97, 0x10, 0xdd, 0xc5, 0x9c, 0x88, 0x3e, 0xa4,
	0xd6, 0x8a, 0x41, 0xf3, 0x7e, 0x7b, 0x97, 0xbf, 0xd3, 0xa1, 0xbc, 0xeb, 0xb7, 0x8b, 0x86, 0x63,
	0x87, 0x37, 0x32, 0xfc, 0x79, 0xe8, 0x99, 0x7b, 0x25, 0xfe, 0xbc, 0x47, 0xbc, 0x62, 0x95, 0x18,
	0xda, 0xcc, 0x2e, 0x21, 0x1a, 0xe6, 0x04, 0x2d, 0xc1, 0xac, 0x6c, 0x14, 0x35, 0xc3, 0x36, 0xcd,
	0x88, 0x6f, 0xd5, 0x44, 0x9f, 0xf5, 0xe5, 0x99, 0x16, 0xf2, 0xdc, 0xbd, 0x48, 0x9e, 0xbe, 0x00,
	0x63, 0x25, 0xfa, 0x7d, 0x06, 0xd2, 0x75, 0xc2, 0xcb, 0xb6, 0xe3, 0x33, 0x1e, 0x20, 0x08, 0xda,
	0x80, 0x94, 0x4d, 0x19, 0x97, 0x05, 0x28, 0x13, 0x15, 0x30, 0x1b, 0x10, 0x88, 0x0a, 0x0c, 0x58,
	0xb4, 0x3c, 0x9d, 0x3b, 0x7b, 0x84, 0x05, 0x3f, 0x1c, 0x5b, 0xba, 0xe7, 0xf7, 0x7a, 0xd6, 0x73,
	0xa9, 0xf4, 0xa5, 0x98, 0x55, 0xc6, 0xb5, 0x79, 0xcb, 0x6b, 0x0a, 0xb2, 0x66, 0xc0, 0xd5, 0x10,
	0x54, 0x68, 0x0b, 0x80, 0x11, 0xae, 0x63, 0x51, 0x84, 0x6c, 0xcb, 0xa5, 0x53, 0x4e, 0xb1, 0x48,
	0x05, 0xf4, 0x0d, 0x64, 0x64, 0xa6, 0x26, 0xb1, 0x74, 0xaf, 0x8b, 0x5d, 0xe2, 0x4d, 0xd8, 0xc8,
	0xb4, 0xe0, 0xa9, 0x12, 0xab, 0x21, 0x58, 0xd0, 0x2e, 0xdc, 0x90, 0xcc, 0x2e, 0xb1, 0x31, 0x65,
	0x94, 0x75, 0x74, 0x97, 0x1c, 0x60, 0xd7, 0xf4, 0x44, 0x7b, 0x2f, 0x1f, 0xe0, 0x3d, 0x41, 0xa7,
	0x45, 0x6c, 0x9a, 0x24, 0x43, 0xdf, 0xc3, 0x82, 0x8c, 0x23, 0x6e, 0x8b, 0xa7, 0xb7, 0xb1, 0x15,
	0xdc, 0x00, 0x71, 0x55, 0x2e, 0xaf, 0x39, 0x12, 0x5c, 0xe2, 0x99, 0x79, 0x6b, 0x92, 0x09, 0x7d,
	0x07, 0xf3, 0x32, 0x82, 0xbc, 0x6f, 0x61, 0x87, 0xb3, 0x33, 0x13, 0x05, 0xb8, 0x2e, 0xa8, 0x36,
	0x05, 0x93, 0xec, 0x2e, 0x32, 0x61, 0x51, 0xf2, 0x0f, 0xc6, 0x44, 0x18, 0x62, 0x76, 0xa2, 0x10,
	0x52, 0x8f, 0xfe, 0x5b, 0x08, 0xa3, 0xf4, 0xfb, 0xe1, 0xb3, 0xb6, 0xc3, 0xcc, 0xa0, 0x1f, 0x91,
	0x54, 0xa9, 0x89, 0xc2, 0xc8, 0x7e, 0xb4, 0x22, 0xb6, 0x48, 0x2d, 0x0a, 0x4b, 0xb2, 0xcf, 0xba,
	0xed, 0x98, 0xbe, 0x45, 0x74, 0x6c, 0x18, 0xfd, 0x48, 0x30, 0x51, 0xa4, 0x45, 0x49, 0xb8, 0x25,
	0xf8, 0xca, 0x86, 0x11, 0x86, 0x7a, 0x7a, 0xe5, 0xe8, 0x38, 0xaf, 0xbc, 0x3a, 0xce, 0xc7, 0xfe,
	0x0a, 0x9e, 0xf7, 0xcf, 0x71, 0xb8, 0x2d, 0x75, 0x6d, 0xb1, 0x60, 0x26, 0x90, 0x7e, 0x6a, 0x55,
	0x62, 0x91, 0x8e, 0x58, 0x21, 0x2a, 0xdb, 0x75, 0x86, 0x26, 0x8d, 0x32, 0x3c, 0x69, 0xee, 0xc3,
	0x75, 0x53, 0x82, 0x47, 0xe7, 0x64, 0xdf, 0x11, 0x0d, 0xbf, 0xb1, 0x43, 0x35, 0x71, 0xc1, 0x50,
	0xdd, 0x86, 0xb9, 0xb6, 0xef, 0xb2, 0xe8, 0xe1, 0xca, 0x37, 0x56, 0x0a, 0x85, 0xb8, 0xfb, 0x3f,
	0x84, 0xa8, 0x38, 0x94, 0x69, 0x10, 0x70, 0x84, 0x4f, 0x77, 0x0b, 0xae, 0x19, 0x8e, 0xdd, 0xb3,
	0x48, 0x50, 0x98, 0x5c, 0xd4, 0x53, 0x97, 0x59, 0xd4, 0x83, 0xc3, 0x81, 0x7b, 0xf5, 0xb5, 0x02,
	0x0b, 0x3b, 0x94, 0x77, 0x4d, 0x17, 0x1f, 0x50, 0xd6, 0x19, 0xec, 0x92, 0xf3, 0xfb, 0x4b, 0x19,
	0xdd, 0x5f, 0x67, 0x15, 0x8d, 0x0f, 0x2b, 0x3a, 0x26, 0xcb, 0xc4, 0xe4, 0x59, 0xde, 0xfb, 0x49,
	0x81, 0xb9, 0x33, 0x4b, 0x10, 0xdd, 0x82, 0x6c, 0x65, 0xbd, 0x55, 0xdf, 0xd0, 0x1b, 0xcd, 0x72,
	0xb3, 0xd5, 0xd0, 0x5b, 0xf5, 0xc6, 0x76, 0xad, 0xa2, 0x3e, 0x53, 0x6b, 0xd5, 0x4c, 0x0c, 0x65,
	0x61, 0x61, 0xc8, 0xbb, 0x5d, 0x56, 0x35, 0xb5, 0xfe, 0x79, 0x46, 0x41, 0x37, 0x60, 0x7e, 0xc4,
	0x53, 0xab, 0x66, 0xe2, 0xa8, 0x00, 0xb7, 0xcf, 0x11, 0x86, 0x87, 0xf4, 0x67, 0x5f, 0x6a, 0xba,
	0x56, 0x8b, 0x28, 0x12, 0xe8, 0x0e, 0xac, 0xfe, 0x0b, 0xb2, 0x55, 0x6f, 0x34, 0xcb, 0x1b, 0xb5,
	0x4c, 0x72, 0x39, 0x79, 0xf4, 0x3a, 0x17, 0xbb, 0xf7, 0xb7, 0x02, 0xd7, 0xce, 0xad, 0x27, 0xb4,
	0x02, 0xb7, 0xd4, 0x7a, 0xa3, 0xa5, 0x95, 0xeb, 0x95, 0xda, 0xf8, 0x02, 0x6e, 0x41, 0x76, 0x04,
	0x31, 0x28, 0xe2, 0x26, 0xdc, 0x18, 0xeb, 0x15, 0x85, 0x3c, 0x80, 0xc2, 0x18, 0xf2, 0x8b, 0x8a,
	0xb9, 0x0f, 0x77, 0xff, 0x03, 0xbd, 0xa3, 0x36, 0xd7, 0xab, 0x5a, 0x79, 0x27, 0x93, 0x44, 0x79,
	0xb8, 0x39, 0x02, 0xfe, 0xba, 0xb5, 0x59, 0xaf, 0x69, 0xe5, 0xb5, 0xcd, 0x5a, 0x66, 0x4a, 0x96,
	0xbc, 0xf6, 0xd5, 0x9b, 0x93, 0x9c, 0xf2, 0xf6, 0x24, 0xa7, 0xfc, 0x79, 0x92, 0x53, 0x5e, 0x9e,
	0xe6, 0x62, 0x6f, 0x4f, 0x73, 0xb1, 0x5f, 0x4f, 0x73, 0xb1, 0x6f, 0x3f, 0x39, 0x73, 0xdf, 0x2b,
	0xc1, 0x2a, 0x7f, 0x58, 0x27, 0xfc, 0xc0, 0x71, 0xf7, 0xe4, 0x57, 0x69, 0xff, 0xe3, 0xd2, 0xe1,
	0xb9, 0xff, 0xb4, 0xc5, 0x23, 0x68, 0x4f, 0x8b, 0xcb, 0xf2, 0xe4, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x37, 0x7b, 0x5f, 0x19, 0x8d, 0x0b, 0x00, 0x00,
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochMaxPairedChunk != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.EpochMaxPairedChunk))
		i--
		dAtA[i] = 0x30
	}
	if m.EpochChunkSize != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.EpochChunkSize))
		i--
		dAtA[i] = 0x28
	}
	if m.EpochStartHeight != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.EpochStartHeight))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.EpochDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.EpochDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EpochStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EpochStartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.CurrentNumber != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.CurrentNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.InsuranceId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.InsuranceId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Insurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Insurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Insurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.ChunkId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.ChunkId))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.FeeRate.Size()
		i -= size
		if _, err := m.FeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetAmountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetAmountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetAmountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardModuleAccBalance.Size()
		i -= size
		if _, err := m.RewardModuleAccBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.TotalUnbondingBalance.Size()
		i -= size
		if _, err := m.TotalUnbondingBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.TotalInsuranceTokens.Size()
		i -= size
		if _, err := m.TotalInsuranceTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.TotalLiquidTokens.Size()
		i -= size
		if _, err := m.TotalLiquidTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.TotalChunksBalance.Size()
		i -= size
		if _, err := m.TotalChunksBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalRemainingRewards.Size()
		i -= size
		if _, err := m.TotalRemainingRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalDelShares.Size()
		i -= size
		if _, err := m.TotalDelShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NetAmount.Size()
		i -= size
		if _, err := m.NetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.LsTokensTotalSupply.Size()
		i -= size
		if _, err := m.LsTokensTotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MintRate.Size()
		i -= size
		if _, err := m.MintRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidUnstakeUnbondingDelegationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidUnstakeUnbondingDelegationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidUnstakeUnbondingDelegationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	{
		size := m.BurnAmount.Size()
		i -= size
		if _, err := m.BurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChunkId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.ChunkId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawingInsurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawingInsurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawingInsurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	if m.ChunkId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.ChunkId))
		i--
		dAtA[i] = 0x10
	}
	if m.InsuranceId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.InsuranceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentNumber != 0 {
		n += 1 + sovLiquidstaking(uint64(m.CurrentNumber))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EpochStartTime)
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.EpochDuration)
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.EpochStartHeight != 0 {
		n += 1 + sovLiquidstaking(uint64(m.EpochStartHeight))
	}
	if m.EpochChunkSize != 0 {
		n += 1 + sovLiquidstaking(uint64(m.EpochChunkSize))
	}
	if m.EpochMaxPairedChunk != 0 {
		n += 1 + sovLiquidstaking(uint64(m.EpochMaxPairedChunk))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	if m.InsuranceId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.InsuranceId))
	}
	if m.Status != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Status))
	}
	return n
}

func (m *Insurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.FeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.ChunkId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.ChunkId))
	}
	if m.Status != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Status))
	}
	return n
}

func (m *NetAmountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.LsTokensTotalSupply.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.NetAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalDelShares.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalRemainingRewards.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalChunksBalance.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalLiquidTokens.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalInsuranceTokens.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalUnbondingBalance.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.RewardModuleAccBalance.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *LiquidUnstakeUnbondingDelegationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.ChunkId))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.BurnAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *WithdrawingInsurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsuranceId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.InsuranceId))
	}
	if m.ChunkId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.ChunkId))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func sovLiquidstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidstaking(x uint64) (n int) {
	return sovLiquidstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			m.CurrentNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EpochStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.EpochDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartHeight", wireType)
			}
			m.EpochStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochStartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochChunkSize", wireType)
			}
			m.EpochChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochChunkSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochMaxPairedChunk", wireType)
			}
			m.EpochMaxPairedChunk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochMaxPairedChunk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceId", wireType)
			}
			m.InsuranceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsuranceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChunkStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Insurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Insurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Insurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InsuranceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetAmountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetAmountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetAmountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LsTokensTotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LsTokensTotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDelShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRemainingRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRemainingRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChunksBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalChunksBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLiquidTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInsuranceTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalInsuranceTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnbondingBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalUnbondingBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardModuleAccBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardModuleAccBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidUnstakeUnbondingDelegationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidUnstakeUnbondingDelegationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidUnstakeUnbondingDelegationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawingInsurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawingInsurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawingInsurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceId", wireType)
			}
			m.InsuranceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsuranceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidstaking = fmt.Errorf("proto: unexpected end of group")
)
