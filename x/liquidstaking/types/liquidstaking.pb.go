// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/liquidstaking/v1/liquidstaking.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChunkStatus defines the status of the chunk.
type ChunkStatus int32

const (
	CHUNK_STATUS_UNSPECIFIED ChunkStatus = 0
	// This status indicates that the chunk is ready to be paired with an
	// insurance.
	CHUNK_STATUS_PAIRING ChunkStatus = 1
	// A chunk is paired with an insurance that has the lowest fee rate.
	// The fee rate is determined by the sum of the insurance fee rate set by
	// the insurance provider and the commission fee rate set by the validator
	// designated by the insurance provider.
	CHUNK_STATUS_PAIRED ChunkStatus = 2
	// A paired chunk enters this status when paired insurance is started to be
	// withdrawn or is insufficient (meaning the insurance balance is below the
	// minimum requirement to be considered valid insurance) or the validator of
	// the insurance becomes tombstoned.
	CHUNK_STATUS_UNPAIRING ChunkStatus = 3
	// When a delegator (also known as a liquid staker) sends a MsgLiquidUnstake,
	// it is queued as a PendingLiquidUnstake. At the end of the epoch,
	// the actual undelegation is triggered and the chunk enters this state.
	// Once the unbonding period is over in next epoch, the staked tokens are
	// returned to the delegator's account and the associated chunk object is
	// removed.
	CHUNK_STATUS_UNPAIRING_FOR_UNSTAKING ChunkStatus = 4
)

var ChunkStatus_name = map[int32]string{
	0: "CHUNK_STATUS_UNSPECIFIED",
	1: "CHUNK_STATUS_PAIRING",
	2: "CHUNK_STATUS_PAIRED",
	3: "CHUNK_STATUS_UNPAIRING",
	4: "CHUNK_STATUS_UNPAIRING_FOR_UNSTAKING",
}

var ChunkStatus_value = map[string]int32{
	"CHUNK_STATUS_UNSPECIFIED":             0,
	"CHUNK_STATUS_PAIRING":                 1,
	"CHUNK_STATUS_PAIRED":                  2,
	"CHUNK_STATUS_UNPAIRING":               3,
	"CHUNK_STATUS_UNPAIRING_FOR_UNSTAKING": 4,
}

func (x ChunkStatus) String() string {
	return proto.EnumName(ChunkStatus_name, int32(x))
}

func (ChunkStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}

// InsuranceStatus defines the status of the insurance.
type InsuranceStatus int32

const (
	INSURANCE_STATUS_UNSPECIFIED InsuranceStatus = 0
	// This is the default status of an insurance when an insurance provider sends
	// a MsgProvideInsurance. This status indicates that the insurance is ready to
	// be paired with a chunk. When an empty slot is available and either
	// msgLiquidStake is received or pairing chunks have been created in the
	// recent epoch, the insurance with the lowest fee will be paired with the
	// chunk. Once paired, the insurance contract can be cancelled using
	// MsgCancelProvideInsurance.
	INSURANCE_STATUS_PAIRING InsuranceStatus = 1
	// An insurance is paired with a chunk. While the insurance is in this status,
	// it serves as a form of protection for the chunk by insuring it against
	// unexpected loss that may occur due to validator slashing. This ensures that
	// the chunk remains same size and maximize its staking rewards.
	INSURANCE_STATUS_PAIRED InsuranceStatus = 2
	// A paired insurance enters this status when it no longer has enough balance
	// to cover slashing penalties, when the validator is tombstoned, or
	// when the paired chunk is started to be undelegated.
	// At the next epoch, unpairing will be unpaired.
	INSURANCE_STATUS_UNPAIRING InsuranceStatus = 3
	// A paired insurance enters this status when there are
	// queued withdrawal insurance requests created by MsgWithdrawInsurance at the
	// epoch.
	INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAWAL InsuranceStatus = 4
	// Unpairing insurances from previous epoch enters this status.
	// Unpaired insurance can be withdrawn immediately by MsgWithdrawInsurance.
	INSURANCE_STATUS_UNPAIRED InsuranceStatus = 5
)

var InsuranceStatus_name = map[int32]string{
	0: "INSURANCE_STATUS_UNSPECIFIED",
	1: "INSURANCE_STATUS_PAIRING",
	2: "INSURANCE_STATUS_PAIRED",
	3: "INSURANCE_STATUS_UNPAIRING",
	4: "INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAWAL",
	5: "INSURANCE_STATUS_UNPAIRED",
}

var InsuranceStatus_value = map[string]int32{
	"INSURANCE_STATUS_UNSPECIFIED":              0,
	"INSURANCE_STATUS_PAIRING":                  1,
	"INSURANCE_STATUS_PAIRED":                   2,
	"INSURANCE_STATUS_UNPAIRING":                3,
	"INSURANCE_STATUS_UNPAIRING_FOR_WITHDRAWAL": 4,
	"INSURANCE_STATUS_UNPAIRED":                 5,
}

func (x InsuranceStatus) String() string {
	return proto.EnumName(InsuranceStatus_name, int32(x))
}

func (InsuranceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}

// Epoch defines the epoch of the module.
type Epoch struct {
	CurrentNumber uint64        `protobuf:"varint,1,opt,name=current_number,json=currentNumber,proto3" json:"current_number,omitempty"`
	StartTime     time.Time     `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	Duration      time.Duration `protobuf:"bytes,3,opt,name=duration,proto3,stdduration" json:"duration"`
	StartHeight   int64         `protobuf:"varint,4,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{0}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetCurrentNumber() uint64 {
	if m != nil {
		return m.CurrentNumber
	}
	return 0
}

func (m *Epoch) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Epoch) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Epoch) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

// DynamicFeeRate defines parameters realated with dynamic fee rate mechanism.
type DynamicFeeRate struct {
	// minimum fee rate
	R0 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=r0,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"r0"`
	// Softcap for utilization ratio. If the utilization ratio is below this
	// value, fee rate is R0.
	USoftCap github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=u_soft_cap,json=uSoftCap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"u_soft_cap"`
	// Hardcap for utilization ratio. If the utilization ratio cannot bigger than
	// this value.
	UHardCap github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=u_hard_cap,json=uHardCap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"u_hard_cap"`
	// Optimal utilization ratio.
	UOptimal github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=u_optimal,json=uOptimal,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"u_optimal"`
	// If the current utilization ratio is between softcap and optimal, fee rate
	// increases at a slow pace.
	Slope1 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=slope1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope1"`
	// If the current utilization ratio is above optimal, fee rate increases at a
	// faster pace.
	Slope2 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=slope2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope2"`
	// Maximum fee rate.
	MaxFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=max_fee_rate,json=maxFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_fee_rate"`
}

func (m *DynamicFeeRate) Reset()         { *m = DynamicFeeRate{} }
func (m *DynamicFeeRate) String() string { return proto.CompactTextString(m) }
func (*DynamicFeeRate) ProtoMessage()    {}
func (*DynamicFeeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{1}
}
func (m *DynamicFeeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicFeeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicFeeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicFeeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicFeeRate.Merge(m, src)
}
func (m *DynamicFeeRate) XXX_Size() int {
	return m.Size()
}
func (m *DynamicFeeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicFeeRate.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicFeeRate proto.InternalMessageInfo

// Params defines the parameters for the module.
type Params struct {
	DynamicFeeRate DynamicFeeRate `protobuf:"bytes,1,opt,name=dynamic_fee_rate,json=dynamicFeeRate,proto3" json:"dynamic_fee_rate"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Chunk defines the chunk of the module.
type Chunk struct {
	// Id of the chunk
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Id of Paired insurance, 0 means no insurance
	PairedInsuranceId    uint64 `protobuf:"varint,2,opt,name=paired_insurance_id,json=pairedInsuranceId,proto3" json:"paired_insurance_id,omitempty"`
	UnpairingInsuranceId uint64 `protobuf:"varint,3,opt,name=unpairing_insurance_id,json=unpairingInsuranceId,proto3" json:"unpairing_insurance_id,omitempty"`
	// Status of the chunk
	Status ChunkStatus `protobuf:"varint,4,opt,name=status,proto3,enum=canto.liquidstaking.v1.ChunkStatus" json:"status,omitempty"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{3}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return m.Size()
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

// Insurance defines the insurance of the module.
type Insurance struct {
	// Id of the insurance
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address of the validator
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Address of the insurance provider
	ProviderAddress string `protobuf:"bytes,3,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	// Fee rate of the insurance
	FeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=fee_rate,json=feeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_rate"`
	// Id of the chunk for which the insurance has a duty
	ChunkId uint64 `protobuf:"varint,5,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// Status of the insurance
	Status InsuranceStatus `protobuf:"varint,6,opt,name=status,proto3,enum=canto.liquidstaking.v1.InsuranceStatus" json:"status,omitempty"`
}

func (m *Insurance) Reset()         { *m = Insurance{} }
func (m *Insurance) String() string { return proto.CompactTextString(m) }
func (*Insurance) ProtoMessage()    {}
func (*Insurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{4}
}
func (m *Insurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Insurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Insurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Insurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Insurance.Merge(m, src)
}
func (m *Insurance) XXX_Size() int {
	return m.Size()
}
func (m *Insurance) XXX_DiscardUnknown() {
	xxx_messageInfo_Insurance.DiscardUnknown(m)
}

var xxx_messageInfo_Insurance proto.InternalMessageInfo

// NetAmountState is type for net amount raw data and mint rate, This is a value
// that depends on the several module state every time, so it is used only for
// calculation and query and is not stored in kv.
type NetAmountState struct {
	// Calculated by (total supply of ls tokens) / NetAmount
	MintRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=mint_rate,json=mintRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_rate"`
	// Total supply of ls tokens
	// e.g. 100 ls tokens minted -> 10 ls tokens burned, then total supply is 90
	// ls tokens
	LsTokensTotalSupply github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=ls_tokens_total_supply,json=lsTokensTotalSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ls_tokens_total_supply"`
	// Calculated by reward module account's native token balance + all paired
	// chunk's native token balance + all delegation tokens of paired chunks
	// last Epoch + all unbonding delegation tokens of unpairing chunks
	NetAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=net_amount,json=netAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"net_amount"`
	// The token amount worth of all delegation shares of all paired chunks
	// (slashing applied amount)
	TotalLiquidTokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total_liquid_tokens,json=totalLiquidTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_liquid_tokens"`
	// Balance of reward module account
	RewardModuleAccBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=reward_module_acc_balance,json=rewardModuleAccBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reward_module_acc_balance"`
	// Fee rate applied when deduct module fee at epoch
	FeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=fee_rate,json=feeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_rate"`
	// Utilization ratio
	UtilizationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=utilization_ratio,json=utilizationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"utilization_ratio"`
	// How many chunks which can be created left?
	RemainingChunkSlots github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=remaining_chunk_slots,json=remainingChunkSlots,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"remaining_chunk_slots"`
	// Discount rate applied when withdraw rewards
	DiscountRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=discount_rate,json=discountRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"discount_rate"`
	// --- Chunk related fields
	// The number of paired chunks
	NumPairedChunks github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=num_paired_chunks,json=numPairedChunks,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"num_paired_chunks"`
	// Current chunk size tokens
	ChunkSize github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=chunk_size,json=chunkSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"chunk_size"`
	// Total shares of all paired chunks
	TotalDelShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=total_del_shares,json=totalDelShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_del_shares"`
	// The cumulative reward of all chunks delegations from the last distribution
	TotalRemainingRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=total_remaining_rewards,json=totalRemainingRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_remaining_rewards"`
	// Sum of the balances of all chunks.
	// Note: Paired chunks can be pairing status for various reasons (such as lack
	// of insurance). In such cases, the delegated native tokens returns to the
	// balance of DerivedAddress(Chunk.Id) after un-bonding period is finished.
	TotalChunksBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,14,opt,name=total_chunks_balance,json=totalChunksBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_chunks_balance"`
	// The sum of unbonding balance of all chunks in Unpairing and
	// UnpairingForUnstaking
	TotalUnbondingChunksBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,15,opt,name=total_unbonding_chunks_balance,json=totalUnbondingChunksBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_unbonding_chunks_balance"`
	// --- Insurance related fields
	// The sum of all insurances' amount (= DerivedAddress(Insurance.Id).Balance)
	TotalInsuranceTokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,16,opt,name=total_insurance_tokens,json=totalInsuranceTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_insurance_tokens"`
	// The sum of all paired insurances' amount (=
	// DerivedAddress(Insurance.Id).Balance)
	TotalPairedInsuranceTokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,17,opt,name=total_paired_insurance_tokens,json=totalPairedInsuranceTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_paired_insurance_tokens"`
	// The sum of all unpairing insurances' amount (=
	// DerivedAddress(Insurance.Id).Balance)
	TotalUnpairingInsuranceTokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,18,opt,name=total_unpairing_insurance_tokens,json=totalUnpairingInsuranceTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_unpairing_insurance_tokens"`
	// The cumulative commissions of all insurances
	TotalRemainingInsuranceCommissions github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,19,opt,name=total_remaining_insurance_commissions,json=totalRemainingInsuranceCommissions,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_remaining_insurance_commissions"`
}

func (m *NetAmountState) Reset()      { *m = NetAmountState{} }
func (*NetAmountState) ProtoMessage() {}
func (*NetAmountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{5}
}
func (m *NetAmountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetAmountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetAmountState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetAmountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetAmountState.Merge(m, src)
}
func (m *NetAmountState) XXX_Size() int {
	return m.Size()
}
func (m *NetAmountState) XXX_DiscardUnknown() {
	xxx_messageInfo_NetAmountState.DiscardUnknown(m)
}

var xxx_messageInfo_NetAmountState proto.InternalMessageInfo

type UnpairingForUnstakingChunkInfo struct {
	// The id of chunk
	ChunkId uint64 `protobuf:"varint,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// Address of delegator (=liquid unstaker)
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Amount of ls tokens to burn
	EscrowedLstokens github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=escrowed_lstokens,json=escrowedLstokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"escrowed_lstokens"`
}

func (m *UnpairingForUnstakingChunkInfo) Reset()         { *m = UnpairingForUnstakingChunkInfo{} }
func (m *UnpairingForUnstakingChunkInfo) String() string { return proto.CompactTextString(m) }
func (*UnpairingForUnstakingChunkInfo) ProtoMessage()    {}
func (*UnpairingForUnstakingChunkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{6}
}
func (m *UnpairingForUnstakingChunkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnpairingForUnstakingChunkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnpairingForUnstakingChunkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnpairingForUnstakingChunkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnpairingForUnstakingChunkInfo.Merge(m, src)
}
func (m *UnpairingForUnstakingChunkInfo) XXX_Size() int {
	return m.Size()
}
func (m *UnpairingForUnstakingChunkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnpairingForUnstakingChunkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnpairingForUnstakingChunkInfo proto.InternalMessageInfo

func (m *UnpairingForUnstakingChunkInfo) GetChunkId() uint64 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *UnpairingForUnstakingChunkInfo) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

type WithdrawInsuranceRequest struct {
	// The id of insurance
	InsuranceId uint64 `protobuf:"varint,1,opt,name=insurance_id,json=insuranceId,proto3" json:"insurance_id,omitempty"`
}

func (m *WithdrawInsuranceRequest) Reset()         { *m = WithdrawInsuranceRequest{} }
func (m *WithdrawInsuranceRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawInsuranceRequest) ProtoMessage()    {}
func (*WithdrawInsuranceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ab11aad71f7b33, []int{7}
}
func (m *WithdrawInsuranceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawInsuranceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawInsuranceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawInsuranceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawInsuranceRequest.Merge(m, src)
}
func (m *WithdrawInsuranceRequest) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawInsuranceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawInsuranceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawInsuranceRequest proto.InternalMessageInfo

func (m *WithdrawInsuranceRequest) GetInsuranceId() uint64 {
	if m != nil {
		return m.InsuranceId
	}
	return 0
}

func init() {
	proto.RegisterEnum("canto.liquidstaking.v1.ChunkStatus", ChunkStatus_name, ChunkStatus_value)
	proto.RegisterEnum("canto.liquidstaking.v1.InsuranceStatus", InsuranceStatus_name, InsuranceStatus_value)
	proto.RegisterType((*Epoch)(nil), "canto.liquidstaking.v1.Epoch")
	proto.RegisterType((*DynamicFeeRate)(nil), "canto.liquidstaking.v1.DynamicFeeRate")
	proto.RegisterType((*Params)(nil), "canto.liquidstaking.v1.Params")
	proto.RegisterType((*Chunk)(nil), "canto.liquidstaking.v1.Chunk")
	proto.RegisterType((*Insurance)(nil), "canto.liquidstaking.v1.Insurance")
	proto.RegisterType((*NetAmountState)(nil), "canto.liquidstaking.v1.NetAmountState")
	proto.RegisterType((*UnpairingForUnstakingChunkInfo)(nil), "canto.liquidstaking.v1.UnpairingForUnstakingChunkInfo")
	proto.RegisterType((*WithdrawInsuranceRequest)(nil), "canto.liquidstaking.v1.WithdrawInsuranceRequest")
}

func init() {
	proto.RegisterFile("canto/liquidstaking/v1/liquidstaking.proto", fileDescriptor_d5ab11aad71f7b33)
}

var fileDescriptor_d5ab11aad71f7b33 = []byte{
	// 1427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x98, 0x4d, 0x4f, 0x1b, 0x47,
	0x18, 0xc7, 0xbd, 0x60, 0x08, 0x3c, 0x10, 0x63, 0x0f, 0x84, 0x2c, 0x24, 0x31, 0x94, 0x36, 0x09,
	0x49, 0x14, 0x3b, 0xa1, 0x55, 0x2b, 0xa5, 0x6a, 0x23, 0x63, 0x43, 0xb1, 0x42, 0x1c, 0xba, 0x86,
	0xa6, 0x4a, 0xab, 0x6e, 0x87, 0xdd, 0xb1, 0x3d, 0x62, 0x77, 0xc7, 0xd9, 0x99, 0x85, 0x24, 0xb7,
	0xde, 0x72, 0xcc, 0x31, 0x52, 0x2f, 0x48, 0xbd, 0xf5, 0x53, 0xf4, 0x54, 0xe5, 0x98, 0x5b, 0xab,
	0x1e, 0xd2, 0x8a, 0xa8, 0x52, 0x3f, 0x46, 0xb5, 0x33, 0xbb, 0x6b, 0xcc, 0x8b, 0xd4, 0x6e, 0x2e,
	0x98, 0x9d, 0xe7, 0x99, 0xdf, 0xf3, 0xb2, 0xff, 0x79, 0xb1, 0xe1, 0xba, 0x85, 0x3d, 0xc1, 0xca,
	0x0e, 0x7d, 0x1c, 0x50, 0x9b, 0x0b, 0xbc, 0x43, 0xbd, 0x76, 0x79, 0xf7, 0x76, 0xff, 0x40, 0xa9,
	0xeb, 0x33, 0xc1, 0xd0, 0xb4, 0xf4, 0x2d, 0xf5, 0x9b, 0x76, 0x6f, 0xcf, 0x4e, 0xb5, 0x59, 0x9b,
	0x49, 0x97, 0x72, 0xf8, 0x9f, 0xf2, 0x9e, 0x2d, 0xb6, 0x19, 0x6b, 0x3b, 0xa4, 0x2c, 0x9f, 0xb6,
	0x83, 0x56, 0xd9, 0x0e, 0x7c, 0x2c, 0x28, 0xf3, 0x22, 0xfb, 0xdc, 0x51, 0xbb, 0xa0, 0x2e, 0xe1,
	0x02, 0xbb, 0xdd, 0xc8, 0x61, 0xc6, 0x62, 0xdc, 0x65, 0xdc, 0x54, 0x64, 0xf5, 0xa0, 0x4c, 0x0b,
	0xbf, 0x69, 0x30, 0xb4, 0xd2, 0x65, 0x56, 0x07, 0x5d, 0x86, 0x9c, 0x15, 0xf8, 0x3e, 0xf1, 0x84,
	0xe9, 0x05, 0xee, 0x36, 0xf1, 0x75, 0x6d, 0x5e, 0x5b, 0xcc, 0x1a, 0x67, 0xa3, 0xd1, 0x86, 0x1c,
	0x44, 0x55, 0x00, 0x2e, 0xb0, 0x2f, 0xcc, 0x30, 0x88, 0x3e, 0x30, 0xaf, 0x2d, 0x8e, 0x2d, 0xcd,
	0x96, 0x54, 0x06, 0xa5, 0x38, 0x83, 0xd2, 0x66, 0x9c, 0xc1, 0xf2, 0xc8, 0xab, 0x37, 0x73, 0x99,
	0x17, 0x7f, 0xce, 0x69, 0xc6, 0xa8, 0x9c, 0x17, 0x5a, 0xd0, 0x5d, 0x18, 0x89, 0x6b, 0xd0, 0x07,
	0x25, 0x62, 0xe6, 0x18, 0xa2, 0x16, 0x39, 0x28, 0xc2, 0xcb, 0x90, 0x90, 0x4c, 0x42, 0xef, 0xc1,
	0xb8, 0xca, 0xa2, 0x43, 0x68, 0xbb, 0x23, 0xf4, 0xec, 0xbc, 0xb6, 0x38, 0x68, 0x8c, 0xc9, 0xb1,
	0x35, 0x39, 0xb4, 0xf0, 0x63, 0x16, 0x72, 0xb5, 0xa7, 0x1e, 0x76, 0xa9, 0xb5, 0x4a, 0x88, 0x81,
	0x05, 0x41, 0x9f, 0xc3, 0x80, 0x7f, 0x4b, 0x96, 0x35, 0xba, 0x5c, 0x0a, 0xa9, 0x7f, 0xbc, 0x99,
	0xbb, 0xd2, 0xa6, 0xa2, 0x13, 0x6c, 0x97, 0x2c, 0xe6, 0x46, 0x9d, 0x89, 0x3e, 0x6e, 0x72, 0x7b,
	0xa7, 0x2c, 0x9e, 0x76, 0x09, 0x2f, 0xd5, 0x88, 0x65, 0x0c, 0xf8, 0xb7, 0xd0, 0x3a, 0x40, 0x60,
	0x72, 0xd6, 0x12, 0xa6, 0x85, 0xbb, 0xb2, 0xf6, 0xff, 0xcf, 0x19, 0x09, 0x9a, 0xac, 0x25, 0xaa,
	0xb8, 0xab, 0x68, 0x1d, 0xec, 0xdb, 0x92, 0x36, 0x98, 0x92, 0xb6, 0x86, 0x7d, 0x3b, 0xa4, 0xdd,
	0x83, 0xd1, 0xc0, 0x64, 0x5d, 0x41, 0x5d, 0xec, 0xc8, 0x76, 0xa4, 0x81, 0x3d, 0x50, 0xf3, 0xd1,
	0x2a, 0x0c, 0x73, 0x87, 0x75, 0xc9, 0x6d, 0x7d, 0x28, 0x15, 0x29, 0x9a, 0x9d, 0x70, 0x96, 0xf4,
	0xe1, 0x77, 0xe0, 0x2c, 0xa1, 0x0d, 0x18, 0x77, 0xf1, 0x13, 0xb3, 0x45, 0x88, 0xe9, 0x63, 0x41,
	0xf4, 0x33, 0xa9, 0x68, 0xe0, 0xe2, 0x27, 0x91, 0x14, 0x16, 0x5a, 0x30, 0xbc, 0x81, 0x7d, 0xec,
	0x72, 0xf4, 0x15, 0xe4, 0x6d, 0x25, 0x93, 0x1e, 0x5f, 0x93, 0x9a, 0xbc, 0x52, 0x3a, 0x79, 0x99,
	0x96, 0xfa, 0x65, 0xb5, 0x9c, 0x0d, 0xf3, 0x30, 0x72, 0x76, 0xdf, 0xe8, 0x9d, 0xec, 0xf3, 0xfd,
	0xb9, 0xcc, 0xc2, 0x2f, 0x1a, 0x0c, 0x55, 0x3b, 0x81, 0xb7, 0x83, 0x72, 0x30, 0x40, 0xed, 0x68,
	0x4d, 0x0d, 0x50, 0x1b, 0x95, 0x60, 0xb2, 0x8b, 0xa9, 0x4f, 0x6c, 0x93, 0x7a, 0x3c, 0xf0, 0xb1,
	0x67, 0x11, 0x93, 0xda, 0x52, 0x55, 0x59, 0xa3, 0xa0, 0x4c, 0xf5, 0xd8, 0x52, 0xb7, 0xd1, 0x47,
	0x30, 0x1d, 0x78, 0xe1, 0x30, 0xf5, 0xda, 0xfd, 0x53, 0x06, 0xe5, 0x94, 0xa9, 0xc4, 0x7a, 0x78,
	0xd6, 0xa7, 0x30, 0xcc, 0x05, 0x16, 0x01, 0x97, 0x9a, 0xc8, 0x2d, 0xbd, 0x7f, 0x5a, 0x4d, 0x32,
	0xc9, 0xa6, 0x74, 0x35, 0xa2, 0x29, 0x51, 0x09, 0xfb, 0x03, 0x30, 0x9a, 0x20, 0x8f, 0x95, 0x71,
	0x03, 0x0a, 0xbb, 0xd8, 0xa1, 0x36, 0x16, 0xcc, 0x37, 0xb1, 0x6d, 0xfb, 0x84, 0x73, 0xb5, 0x34,
	0x8c, 0x7c, 0x62, 0xa8, 0xa8, 0x71, 0x74, 0x0d, 0xf2, 0x5d, 0x9f, 0xed, 0x52, 0x9b, 0xf4, 0x7c,
	0xa5, 0xf0, 0x8d, 0x89, 0x78, 0x3c, 0x76, 0xad, 0xc3, 0x48, 0xf2, 0x3a, 0xd2, 0xc9, 0xf9, 0x4c,
	0x2b, 0x5a, 0xf6, 0x33, 0x30, 0x62, 0x85, 0xd5, 0x85, 0xbd, 0x1a, 0x92, 0x89, 0x9f, 0x91, 0xcf,
	0x75, 0x1b, 0xdd, 0x4d, 0xda, 0x33, 0x2c, 0xdb, 0x73, 0xf5, 0xb4, 0xf6, 0x24, 0x0d, 0x38, 0xb1,
	0x45, 0x7f, 0xe7, 0x20, 0xd7, 0x20, 0xa2, 0xe2, 0xb2, 0xc0, 0x13, 0xa1, 0x07, 0x09, 0xd7, 0xa3,
	0x4b, 0x3d, 0xd1, 0xd3, 0x53, 0x8a, 0xf5, 0x18, 0x02, 0x64, 0x05, 0x16, 0x4c, 0x3b, 0xdc, 0x14,
	0x6c, 0x87, 0x78, 0xe1, 0x87, 0xc0, 0x8e, 0xc9, 0x83, 0x6e, 0xd7, 0x79, 0x9a, 0x62, 0x13, 0xaa,
	0x7b, 0xc2, 0x98, 0x74, 0xf8, 0xa6, 0x84, 0x6d, 0x86, 0xac, 0xa6, 0x44, 0xa1, 0xfb, 0x00, 0x1e,
	0x11, 0x26, 0x96, 0x45, 0xa4, 0xdc, 0x8f, 0x46, 0xbd, 0xb8, 0x0b, 0xe8, 0x3b, 0x98, 0x54, 0x99,
	0xaa, 0x5e, 0x46, 0xd9, 0xa7, 0x78, 0x97, 0x61, 0xc2, 0x05, 0x89, 0x5a, 0x97, 0x24, 0x95, 0x39,
	0xa2, 0x30, 0xe3, 0x93, 0xbd, 0x70, 0xfb, 0x74, 0x99, 0x1d, 0x38, 0xc4, 0xc4, 0x96, 0x65, 0x6e,
	0x63, 0x27, 0x7c, 0x49, 0x29, 0xb6, 0xad, 0x30, 0xca, 0xb4, 0x02, 0xde, 0x97, 0xbc, 0x8a, 0x65,
	0x2d, 0x2b, 0x5a, 0x9f, 0x16, 0x87, 0xdf, 0x4d, 0x8b, 0xdf, 0x40, 0x21, 0x10, 0xd4, 0xa1, 0xcf,
	0xe4, 0x39, 0x66, 0xca, 0xe3, 0x2c, 0xe5, 0x76, 0x96, 0x3f, 0x04, 0x32, 0xc2, 0xbf, 0x68, 0x1b,
	0xce, 0xf9, 0xc4, 0xc5, 0xd4, 0x0b, 0xb7, 0x08, 0x25, 0x79, 0xee, 0x30, 0xc1, 0xf5, 0x91, 0x74,
	0x2a, 0x49, 0x60, 0x6a, 0x73, 0x08, 0x51, 0xa8, 0x09, 0x67, 0x6d, 0xca, 0xad, 0xf0, 0x15, 0xab,
	0x86, 0x8c, 0xa6, 0x4a, 0x7e, 0x3c, 0x86, 0xc8, 0xae, 0x3c, 0x82, 0x82, 0x17, 0xb8, 0x66, 0xb4,
	0x1f, 0xca, 0xcc, 0xb9, 0x0e, 0xa9, 0x92, 0x9e, 0xf0, 0x02, 0x77, 0x43, 0x72, 0x64, 0xd2, 0x3c,
	0x94, 0x75, 0xd4, 0x0a, 0xfa, 0x8c, 0xe8, 0x63, 0xa9, 0xa0, 0xa3, 0x92, 0xd0, 0xa4, 0xcf, 0x08,
	0xfa, 0x1a, 0xf2, 0x4a, 0xd6, 0x36, 0x71, 0x4c, 0xde, 0xc1, 0x3e, 0xe1, 0xfa, 0x78, 0xaa, 0x16,
	0xe4, 0x24, 0xa7, 0x46, 0x9c, 0xa6, 0xa4, 0xa0, 0x16, 0x9c, 0x57, 0xe4, 0xde, 0x3b, 0x54, 0x7a,
	0xe4, 0xfa, 0xd9, 0x54, 0x01, 0xce, 0x49, 0x9c, 0x11, 0xd3, 0x0c, 0x05, 0x43, 0xdf, 0xc3, 0x94,
	0x8a, 0xa3, 0xfa, 0x9c, 0xac, 0x99, 0x5c, 0xaa, 0xd6, 0x20, 0xc9, 0x52, 0xbd, 0x8e, 0xd7, 0x0b,
	0x87, 0xa2, 0x8a, 0x10, 0x78, 0xdb, 0xcc, 0xb3, 0x13, 0x35, 0xf6, 0x62, 0x4d, 0xa4, 0x8a, 0x75,
	0x41, 0x52, 0xb7, 0x62, 0x68, 0x7f, 0x50, 0x1b, 0xa6, 0x55, 0xd0, 0xde, 0xd9, 0x18, 0x6d, 0x39,
	0xf9, 0x54, 0xc1, 0x54, 0x93, 0x92, 0x7d, 0x3f, 0xda, 0x75, 0x1e, 0xc3, 0x25, 0x15, 0xe5, 0xd8,
	0xd9, 0x1d, 0x05, 0x2b, 0xa4, 0x0a, 0x36, 0x2b, 0xa1, 0x1b, 0xfd, 0x87, 0x7e, 0x14, 0x72, 0x0f,
	0xe6, 0xe3, 0x6e, 0x1e, 0x3f, 0xfe, 0xa3, 0xa8, 0x28, 0x55, 0xd4, 0x4b, 0x51, 0x3f, 0x8f, 0xde,
	0x1b, 0xa2, 0xc0, 0x3f, 0x68, 0x70, 0xf9, 0xa8, 0x22, 0x7b, 0x91, 0x2d, 0xe6, 0xba, 0x94, 0x73,
	0xca, 0x3c, 0xae, 0x4f, 0xa6, 0xd2, 0xe7, 0x42, 0xbf, 0x3e, 0x93, 0xf0, 0xd5, 0x1e, 0xf9, 0xce,
	0xf8, 0xf3, 0xfd, 0x39, 0xed, 0xe5, 0xfe, 0x5c, 0xe6, 0x9f, 0xf0, 0x9c, 0xfd, 0x55, 0x83, 0x62,
	0x92, 0xee, 0x2a, 0xf3, 0xb7, 0xbc, 0xe8, 0x88, 0x96, 0x52, 0xa8, 0x7b, 0x2d, 0xd6, 0x77, 0xd8,
	0x6b, 0xfd, 0x87, 0xfd, 0x0d, 0x28, 0xd8, 0xc4, 0x21, 0xed, 0x93, 0xae, 0x2a, 0x89, 0x21, 0xbe,
	0x7f, 0x7c, 0x0b, 0x05, 0xc2, 0x2d, 0x9f, 0xed, 0x11, 0xdb, 0x74, 0x78, 0xd4, 0x66, 0x75, 0x28,
	0x96, 0xa3, 0x3a, 0xaf, 0xfe, 0x87, 0x3a, 0xab, 0x8c, 0x7a, 0x46, 0x3e, 0x26, 0xad, 0x47, 0xa0,
	0x85, 0xcf, 0x40, 0x7f, 0x48, 0x45, 0xc7, 0xf6, 0xf1, 0x5e, 0x52, 0xb6, 0x41, 0x1e, 0x07, 0x84,
	0x8b, 0xf0, 0xbb, 0x4d, 0xdf, 0xf5, 0x4e, 0x55, 0x31, 0x46, 0x7b, 0xb7, 0xba, 0xeb, 0x3f, 0x6b,
	0x30, 0x76, 0xe8, 0xc2, 0x86, 0x2e, 0x82, 0x5e, 0x5d, 0xdb, 0x6a, 0xdc, 0x33, 0x9b, 0x9b, 0x95,
	0xcd, 0xad, 0xa6, 0xb9, 0xd5, 0x68, 0x6e, 0xac, 0x54, 0xeb, 0xab, 0xf5, 0x95, 0x5a, 0x3e, 0x83,
	0x74, 0x98, 0xea, 0xb3, 0x6e, 0x54, 0xea, 0x46, 0xbd, 0xf1, 0x45, 0x5e, 0x43, 0xe7, 0x61, 0xf2,
	0x98, 0x65, 0xa5, 0x96, 0x1f, 0x40, 0xb3, 0x30, 0x7d, 0x04, 0x18, 0x4f, 0x1a, 0x44, 0x8b, 0xf0,
	0xc1, 0xc9, 0x36, 0x73, 0xf5, 0x81, 0x11, 0x86, 0xde, 0xac, 0xdc, 0x0b, 0x3d, 0xb3, 0xb3, 0xd9,
	0xe7, 0x3f, 0x15, 0x33, 0xd7, 0x0f, 0x34, 0x98, 0x38, 0x72, 0x7d, 0x42, 0xf3, 0x70, 0xb1, 0xde,
	0x68, 0x6e, 0x19, 0x95, 0x46, 0x75, 0xe5, 0xe4, 0xa4, 0x2f, 0x82, 0x7e, 0xcc, 0xa3, 0x97, 0xf8,
	0x05, 0x38, 0x7f, 0xa2, 0x55, 0x26, 0x5f, 0x84, 0xd9, 0x13, 0xe0, 0xbd, 0x02, 0x6e, 0xc2, 0xb5,
	0xd3, 0xed, 0xb2, 0x88, 0x87, 0xf5, 0xcd, 0xb5, 0x9a, 0x51, 0x79, 0x58, 0x59, 0xcf, 0x67, 0xd1,
	0x25, 0x98, 0x39, 0xc5, 0x7d, 0xa5, 0x96, 0x1f, 0x52, 0x45, 0x2e, 0x7f, 0xf9, 0xea, 0xa0, 0xa8,
	0xbd, 0x3e, 0x28, 0x6a, 0x7f, 0x1d, 0x14, 0xb5, 0x17, 0x6f, 0x8b, 0x99, 0xd7, 0x6f, 0x8b, 0x99,
	0xdf, 0xdf, 0x16, 0x33, 0x8f, 0x3e, 0x39, 0xa4, 0x92, 0x6a, 0x78, 0xb9, 0xbc, 0xd9, 0x20, 0x62,
	0x8f, 0xf9, 0x3b, 0xea, 0xa9, 0xbc, 0xfb, 0x71, 0xf9, 0xc9, 0x91, 0x5f, 0x0d, 0xa4, 0x74, 0xb6,
	0x87, 0xe5, 0x57, 0xe1, 0x0f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x3b, 0x39, 0x24, 0x59,
	0x10, 0x00, 0x00,
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartHeight != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLiquidstaking(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.CurrentNumber != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.CurrentNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynamicFeeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicFeeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicFeeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxFeeRate.Size()
		i -= size
		if _, err := m.MaxFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Slope2.Size()
		i -= size
		if _, err := m.Slope2.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Slope1.Size()
		i -= size
		if _, err := m.Slope1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.UOptimal.Size()
		i -= size
		if _, err := m.UOptimal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.UHardCap.Size()
		i -= size
		if _, err := m.UHardCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.USoftCap.Size()
		i -= size
		if _, err := m.USoftCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.R0.Size()
		i -= size
		if _, err := m.R0.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DynamicFeeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.UnpairingInsuranceId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.UnpairingInsuranceId))
		i--
		dAtA[i] = 0x18
	}
	if m.PairedInsuranceId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.PairedInsuranceId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Insurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Insurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Insurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.ChunkId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.ChunkId))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.FeeRate.Size()
		i -= size
		if _, err := m.FeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetAmountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetAmountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetAmountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalRemainingInsuranceCommissions.Size()
		i -= size
		if _, err := m.TotalRemainingInsuranceCommissions.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size := m.TotalUnpairingInsuranceTokens.Size()
		i -= size
		if _, err := m.TotalUnpairingInsuranceTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.TotalPairedInsuranceTokens.Size()
		i -= size
		if _, err := m.TotalPairedInsuranceTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.TotalInsuranceTokens.Size()
		i -= size
		if _, err := m.TotalInsuranceTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.TotalUnbondingChunksBalance.Size()
		i -= size
		if _, err := m.TotalUnbondingChunksBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.TotalChunksBalance.Size()
		i -= size
		if _, err := m.TotalChunksBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.TotalRemainingRewards.Size()
		i -= size
		if _, err := m.TotalRemainingRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.TotalDelShares.Size()
		i -= size
		if _, err := m.TotalDelShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.ChunkSize.Size()
		i -= size
		if _, err := m.ChunkSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.NumPairedChunks.Size()
		i -= size
		if _, err := m.NumPairedChunks.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.DiscountRate.Size()
		i -= size
		if _, err := m.DiscountRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.RemainingChunkSlots.Size()
		i -= size
		if _, err := m.RemainingChunkSlots.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.UtilizationRatio.Size()
		i -= size
		if _, err := m.UtilizationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.FeeRate.Size()
		i -= size
		if _, err := m.FeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.RewardModuleAccBalance.Size()
		i -= size
		if _, err := m.RewardModuleAccBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalLiquidTokens.Size()
		i -= size
		if _, err := m.TotalLiquidTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NetAmount.Size()
		i -= size
		if _, err := m.NetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.LsTokensTotalSupply.Size()
		i -= size
		if _, err := m.LsTokensTotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MintRate.Size()
		i -= size
		if _, err := m.MintRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UnpairingForUnstakingChunkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnpairingForUnstakingChunkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnpairingForUnstakingChunkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EscrowedLstokens.Size()
		i -= size
		if _, err := m.EscrowedLstokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChunkId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.ChunkId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawInsuranceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawInsuranceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawInsuranceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InsuranceId != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.InsuranceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentNumber != 0 {
		n += 1 + sovLiquidstaking(uint64(m.CurrentNumber))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.StartHeight != 0 {
		n += 1 + sovLiquidstaking(uint64(m.StartHeight))
	}
	return n
}

func (m *DynamicFeeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.R0.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.USoftCap.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.UHardCap.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.UOptimal.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.Slope1.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.Slope2.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.MaxFeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DynamicFeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	if m.PairedInsuranceId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.PairedInsuranceId))
	}
	if m.UnpairingInsuranceId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.UnpairingInsuranceId))
	}
	if m.Status != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Status))
	}
	return n
}

func (m *Insurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Id))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.FeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	if m.ChunkId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.ChunkId))
	}
	if m.Status != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Status))
	}
	return n
}

func (m *NetAmountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.LsTokensTotalSupply.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.NetAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalLiquidTokens.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.RewardModuleAccBalance.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.FeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.UtilizationRatio.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.RemainingChunkSlots.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.DiscountRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.NumPairedChunks.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.ChunkSize.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalDelShares.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalRemainingRewards.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalChunksBalance.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalUnbondingChunksBalance.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.TotalInsuranceTokens.Size()
	n += 2 + l + sovLiquidstaking(uint64(l))
	l = m.TotalPairedInsuranceTokens.Size()
	n += 2 + l + sovLiquidstaking(uint64(l))
	l = m.TotalUnpairingInsuranceTokens.Size()
	n += 2 + l + sovLiquidstaking(uint64(l))
	l = m.TotalRemainingInsuranceCommissions.Size()
	n += 2 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *UnpairingForUnstakingChunkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChunkId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.ChunkId))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.EscrowedLstokens.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *WithdrawInsuranceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsuranceId != 0 {
		n += 1 + sovLiquidstaking(uint64(m.InsuranceId))
	}
	return n
}

func sovLiquidstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidstaking(x uint64) (n int) {
	return sovLiquidstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			m.CurrentNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicFeeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicFeeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicFeeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.R0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field USoftCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.USoftCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UHardCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UHardCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UOptimal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UOptimal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slope1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slope2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slope2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicFeeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DynamicFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairedInsuranceId", wireType)
			}
			m.PairedInsuranceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairedInsuranceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnpairingInsuranceId", wireType)
			}
			m.UnpairingInsuranceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnpairingInsuranceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChunkStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Insurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Insurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Insurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InsuranceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetAmountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetAmountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetAmountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LsTokensTotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LsTokensTotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLiquidTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardModuleAccBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardModuleAccBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilizationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UtilizationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingChunkSlots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingChunkSlots.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DiscountRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPairedChunks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NumPairedChunks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChunkSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDelShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRemainingRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRemainingRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChunksBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalChunksBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnbondingChunksBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalUnbondingChunksBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInsuranceTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalInsuranceTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPairedInsuranceTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPairedInsuranceTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnpairingInsuranceTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalUnpairingInsuranceTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRemainingInsuranceCommissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRemainingInsuranceCommissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnpairingForUnstakingChunkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnpairingForUnstakingChunkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnpairingForUnstakingChunkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkId", wireType)
			}
			m.ChunkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowedLstokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EscrowedLstokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawInsuranceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawInsuranceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawInsuranceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceId", wireType)
			}
			m.InsuranceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsuranceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidstaking = fmt.Errorf("proto: unexpected end of group")
)
