// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/liquidstaking/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryEpochRequest struct {
}

func (m *QueryEpochRequest) Reset()         { *m = QueryEpochRequest{} }
func (m *QueryEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEpochRequest) ProtoMessage()    {}
func (*QueryEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{2}
}
func (m *QueryEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochRequest.Merge(m, src)
}
func (m *QueryEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochRequest proto.InternalMessageInfo

type QueryEpochResponse struct {
	// epoch defines the current epoch of the module.
	Epoch Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch"`
}

func (m *QueryEpochResponse) Reset()         { *m = QueryEpochResponse{} }
func (m *QueryEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEpochResponse) ProtoMessage()    {}
func (*QueryEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{3}
}
func (m *QueryEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochResponse.Merge(m, src)
}
func (m *QueryEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochResponse proto.InternalMessageInfo

func (m *QueryEpochResponse) GetEpoch() Epoch {
	if m != nil {
		return m.Epoch
	}
	return Epoch{}
}

type QueryChunksRequest struct {
	// Query all chunks in a specific status
	Status     ChunkStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=canto.liquidstaking.v1.ChunkStatus" json:"status,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChunksRequest) Reset()         { *m = QueryChunksRequest{} }
func (m *QueryChunksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChunksRequest) ProtoMessage()    {}
func (*QueryChunksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{4}
}
func (m *QueryChunksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunksRequest.Merge(m, src)
}
func (m *QueryChunksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunksRequest proto.InternalMessageInfo

func (m *QueryChunksRequest) GetStatus() ChunkStatus {
	if m != nil {
		return m.Status
	}
	return CHUNK_STATUS_UNSPECIFIED
}

func (m *QueryChunksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChunksResponse struct {
	Chunks     []QueryChunkResponse `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks"`
	Pagination *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChunksResponse) Reset()         { *m = QueryChunksResponse{} }
func (m *QueryChunksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChunksResponse) ProtoMessage()    {}
func (*QueryChunksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{5}
}
func (m *QueryChunksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunksResponse.Merge(m, src)
}
func (m *QueryChunksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunksResponse proto.InternalMessageInfo

func (m *QueryChunksResponse) GetChunks() []QueryChunkResponse {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *QueryChunksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChunkRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryChunkRequest) Reset()         { *m = QueryChunkRequest{} }
func (m *QueryChunkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChunkRequest) ProtoMessage()    {}
func (*QueryChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{6}
}
func (m *QueryChunkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkRequest.Merge(m, src)
}
func (m *QueryChunkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkRequest proto.InternalMessageInfo

func (m *QueryChunkRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryChunkResponse struct {
	Chunk          Chunk  `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk"`
	DerivedAddress string `protobuf:"bytes,2,opt,name=derived_address,json=derivedAddress,proto3" json:"derived_address,omitempty"`
}

func (m *QueryChunkResponse) Reset()         { *m = QueryChunkResponse{} }
func (m *QueryChunkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChunkResponse) ProtoMessage()    {}
func (*QueryChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{7}
}
func (m *QueryChunkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkResponse.Merge(m, src)
}
func (m *QueryChunkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkResponse proto.InternalMessageInfo

func (m *QueryChunkResponse) GetChunk() Chunk {
	if m != nil {
		return m.Chunk
	}
	return Chunk{}
}

func (m *QueryChunkResponse) GetDerivedAddress() string {
	if m != nil {
		return m.DerivedAddress
	}
	return ""
}

type QueryInsurancesRequest struct {
	// query all insurances in a specific status
	Status InsuranceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=canto.liquidstaking.v1.InsuranceStatus" json:"status,omitempty"`
	// Query all insurances pointing to a specific validator
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Query all insurances provided by ProviderAddress
	ProviderAddress string             `protobuf:"bytes,3,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsurancesRequest) Reset()         { *m = QueryInsurancesRequest{} }
func (m *QueryInsurancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsurancesRequest) ProtoMessage()    {}
func (*QueryInsurancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{8}
}
func (m *QueryInsurancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsurancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsurancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsurancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsurancesRequest.Merge(m, src)
}
func (m *QueryInsurancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsurancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsurancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsurancesRequest proto.InternalMessageInfo

func (m *QueryInsurancesRequest) GetStatus() InsuranceStatus {
	if m != nil {
		return m.Status
	}
	return INSURANCE_STATUS_UNSPECIFIED
}

func (m *QueryInsurancesRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *QueryInsurancesRequest) GetProviderAddress() string {
	if m != nil {
		return m.ProviderAddress
	}
	return ""
}

func (m *QueryInsurancesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsurancesResponse struct {
	Insurances []QueryInsuranceResponse `protobuf:"bytes,1,rep,name=insurances,proto3" json:"insurances"`
	Pagination *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInsurancesResponse) Reset()         { *m = QueryInsurancesResponse{} }
func (m *QueryInsurancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsurancesResponse) ProtoMessage()    {}
func (*QueryInsurancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{9}
}
func (m *QueryInsurancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsurancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsurancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsurancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsurancesResponse.Merge(m, src)
}
func (m *QueryInsurancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsurancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsurancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsurancesResponse proto.InternalMessageInfo

func (m *QueryInsurancesResponse) GetInsurances() []QueryInsuranceResponse {
	if m != nil {
		return m.Insurances
	}
	return nil
}

func (m *QueryInsurancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryInsuranceRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryInsuranceRequest) Reset()         { *m = QueryInsuranceRequest{} }
func (m *QueryInsuranceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceRequest) ProtoMessage()    {}
func (*QueryInsuranceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{10}
}
func (m *QueryInsuranceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceRequest.Merge(m, src)
}
func (m *QueryInsuranceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceRequest proto.InternalMessageInfo

func (m *QueryInsuranceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryInsuranceResponse struct {
	Insurance      Insurance `protobuf:"bytes,1,opt,name=insurance,proto3" json:"insurance"`
	DerivedAddress string    `protobuf:"bytes,2,opt,name=derived_address,json=derivedAddress,proto3" json:"derived_address,omitempty"`
	FeePoolAddress string    `protobuf:"bytes,3,opt,name=fee_pool_address,json=feePoolAddress,proto3" json:"fee_pool_address,omitempty"`
}

func (m *QueryInsuranceResponse) Reset()         { *m = QueryInsuranceResponse{} }
func (m *QueryInsuranceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceResponse) ProtoMessage()    {}
func (*QueryInsuranceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{11}
}
func (m *QueryInsuranceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceResponse.Merge(m, src)
}
func (m *QueryInsuranceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceResponse proto.InternalMessageInfo

func (m *QueryInsuranceResponse) GetInsurance() Insurance {
	if m != nil {
		return m.Insurance
	}
	return Insurance{}
}

func (m *QueryInsuranceResponse) GetDerivedAddress() string {
	if m != nil {
		return m.DerivedAddress
	}
	return ""
}

func (m *QueryInsuranceResponse) GetFeePoolAddress() string {
	if m != nil {
		return m.FeePoolAddress
	}
	return ""
}

type QueryWithdrawInsuranceRequestsRequest struct {
	// Query all withdraw insurance requests requested by ProviderAddress
	ProviderAddress string             `protobuf:"bytes,1,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawInsuranceRequestsRequest) Reset()         { *m = QueryWithdrawInsuranceRequestsRequest{} }
func (m *QueryWithdrawInsuranceRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawInsuranceRequestsRequest) ProtoMessage()    {}
func (*QueryWithdrawInsuranceRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{12}
}
func (m *QueryWithdrawInsuranceRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawInsuranceRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawInsuranceRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawInsuranceRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawInsuranceRequestsRequest.Merge(m, src)
}
func (m *QueryWithdrawInsuranceRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawInsuranceRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawInsuranceRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawInsuranceRequestsRequest proto.InternalMessageInfo

func (m *QueryWithdrawInsuranceRequestsRequest) GetProviderAddress() string {
	if m != nil {
		return m.ProviderAddress
	}
	return ""
}

func (m *QueryWithdrawInsuranceRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryWithdrawInsuranceRequestsResponse struct {
	WithdrawInsuranceRequests []WithdrawInsuranceRequest `protobuf:"bytes,1,rep,name=withdraw_insurance_requests,json=withdrawInsuranceRequests,proto3" json:"withdraw_insurance_requests"`
	Pagination                *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawInsuranceRequestsResponse) Reset() {
	*m = QueryWithdrawInsuranceRequestsResponse{}
}
func (m *QueryWithdrawInsuranceRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawInsuranceRequestsResponse) ProtoMessage()    {}
func (*QueryWithdrawInsuranceRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{13}
}
func (m *QueryWithdrawInsuranceRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawInsuranceRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawInsuranceRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawInsuranceRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawInsuranceRequestsResponse.Merge(m, src)
}
func (m *QueryWithdrawInsuranceRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawInsuranceRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawInsuranceRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawInsuranceRequestsResponse proto.InternalMessageInfo

func (m *QueryWithdrawInsuranceRequestsResponse) GetWithdrawInsuranceRequests() []WithdrawInsuranceRequest {
	if m != nil {
		return m.WithdrawInsuranceRequests
	}
	return nil
}

func (m *QueryWithdrawInsuranceRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryWithdrawInsuranceRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryWithdrawInsuranceRequestRequest) Reset()         { *m = QueryWithdrawInsuranceRequestRequest{} }
func (m *QueryWithdrawInsuranceRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawInsuranceRequestRequest) ProtoMessage()    {}
func (*QueryWithdrawInsuranceRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{14}
}
func (m *QueryWithdrawInsuranceRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawInsuranceRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawInsuranceRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawInsuranceRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawInsuranceRequestRequest.Merge(m, src)
}
func (m *QueryWithdrawInsuranceRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawInsuranceRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawInsuranceRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawInsuranceRequestRequest proto.InternalMessageInfo

func (m *QueryWithdrawInsuranceRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryWithdrawInsuranceRequestResponse struct {
	WithdrawInsuranceRequest WithdrawInsuranceRequest `protobuf:"bytes,1,opt,name=withdraw_insurance_request,json=withdrawInsuranceRequest,proto3" json:"withdraw_insurance_request"`
}

func (m *QueryWithdrawInsuranceRequestResponse) Reset()         { *m = QueryWithdrawInsuranceRequestResponse{} }
func (m *QueryWithdrawInsuranceRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawInsuranceRequestResponse) ProtoMessage()    {}
func (*QueryWithdrawInsuranceRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{15}
}
func (m *QueryWithdrawInsuranceRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawInsuranceRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawInsuranceRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawInsuranceRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawInsuranceRequestResponse.Merge(m, src)
}
func (m *QueryWithdrawInsuranceRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawInsuranceRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawInsuranceRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawInsuranceRequestResponse proto.InternalMessageInfo

func (m *QueryWithdrawInsuranceRequestResponse) GetWithdrawInsuranceRequest() WithdrawInsuranceRequest {
	if m != nil {
		return m.WithdrawInsuranceRequest
	}
	return WithdrawInsuranceRequest{}
}

type QueryUnpairingForUnstakingChunkInfosRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// If queued is true, it means that liquid unstake hasn't started yet.
	// If queued is false, it means that liquid unstake has started.
	Queued     bool               `protobuf:"varint,2,opt,name=queued,proto3" json:"queued,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUnpairingForUnstakingChunkInfosRequest) Reset() {
	*m = QueryUnpairingForUnstakingChunkInfosRequest{}
}
func (m *QueryUnpairingForUnstakingChunkInfosRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryUnpairingForUnstakingChunkInfosRequest) ProtoMessage() {}
func (*QueryUnpairingForUnstakingChunkInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{16}
}
func (m *QueryUnpairingForUnstakingChunkInfosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnpairingForUnstakingChunkInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnpairingForUnstakingChunkInfosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnpairingForUnstakingChunkInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnpairingForUnstakingChunkInfosRequest.Merge(m, src)
}
func (m *QueryUnpairingForUnstakingChunkInfosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnpairingForUnstakingChunkInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnpairingForUnstakingChunkInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnpairingForUnstakingChunkInfosRequest proto.InternalMessageInfo

func (m *QueryUnpairingForUnstakingChunkInfosRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryUnpairingForUnstakingChunkInfosRequest) GetQueued() bool {
	if m != nil {
		return m.Queued
	}
	return false
}

func (m *QueryUnpairingForUnstakingChunkInfosRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryUnpairingForUnstakingChunkInfosResponse struct {
	UnpairingForUnstakingChunkInfos []UnpairingForUnstakingChunkInfo `protobuf:"bytes,1,rep,name=unpairing_for_unstaking_chunk_infos,json=unpairingForUnstakingChunkInfos,proto3" json:"unpairing_for_unstaking_chunk_infos"`
	Pagination                      *query.PageResponse              `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUnpairingForUnstakingChunkInfosResponse) Reset() {
	*m = QueryUnpairingForUnstakingChunkInfosResponse{}
}
func (m *QueryUnpairingForUnstakingChunkInfosResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryUnpairingForUnstakingChunkInfosResponse) ProtoMessage() {}
func (*QueryUnpairingForUnstakingChunkInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{17}
}
func (m *QueryUnpairingForUnstakingChunkInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnpairingForUnstakingChunkInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnpairingForUnstakingChunkInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnpairingForUnstakingChunkInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnpairingForUnstakingChunkInfosResponse.Merge(m, src)
}
func (m *QueryUnpairingForUnstakingChunkInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnpairingForUnstakingChunkInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnpairingForUnstakingChunkInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnpairingForUnstakingChunkInfosResponse proto.InternalMessageInfo

func (m *QueryUnpairingForUnstakingChunkInfosResponse) GetUnpairingForUnstakingChunkInfos() []UnpairingForUnstakingChunkInfo {
	if m != nil {
		return m.UnpairingForUnstakingChunkInfos
	}
	return nil
}

func (m *QueryUnpairingForUnstakingChunkInfosResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryUnpairingForUnstakingChunkInfoRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryUnpairingForUnstakingChunkInfoRequest) Reset() {
	*m = QueryUnpairingForUnstakingChunkInfoRequest{}
}
func (m *QueryUnpairingForUnstakingChunkInfoRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryUnpairingForUnstakingChunkInfoRequest) ProtoMessage() {}
func (*QueryUnpairingForUnstakingChunkInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{18}
}
func (m *QueryUnpairingForUnstakingChunkInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnpairingForUnstakingChunkInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnpairingForUnstakingChunkInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnpairingForUnstakingChunkInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnpairingForUnstakingChunkInfoRequest.Merge(m, src)
}
func (m *QueryUnpairingForUnstakingChunkInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnpairingForUnstakingChunkInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnpairingForUnstakingChunkInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnpairingForUnstakingChunkInfoRequest proto.InternalMessageInfo

func (m *QueryUnpairingForUnstakingChunkInfoRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryUnpairingForUnstakingChunkInfoResponse struct {
	UnpairingForUnstakingChunkInfo UnpairingForUnstakingChunkInfo `protobuf:"bytes,1,opt,name=unpairing_for_unstaking_chunk_info,json=unpairingForUnstakingChunkInfo,proto3" json:"unpairing_for_unstaking_chunk_info"`
}

func (m *QueryUnpairingForUnstakingChunkInfoResponse) Reset() {
	*m = QueryUnpairingForUnstakingChunkInfoResponse{}
}
func (m *QueryUnpairingForUnstakingChunkInfoResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryUnpairingForUnstakingChunkInfoResponse) ProtoMessage() {}
func (*QueryUnpairingForUnstakingChunkInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{19}
}
func (m *QueryUnpairingForUnstakingChunkInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnpairingForUnstakingChunkInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnpairingForUnstakingChunkInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnpairingForUnstakingChunkInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnpairingForUnstakingChunkInfoResponse.Merge(m, src)
}
func (m *QueryUnpairingForUnstakingChunkInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnpairingForUnstakingChunkInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnpairingForUnstakingChunkInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnpairingForUnstakingChunkInfoResponse proto.InternalMessageInfo

func (m *QueryUnpairingForUnstakingChunkInfoResponse) GetUnpairingForUnstakingChunkInfo() UnpairingForUnstakingChunkInfo {
	if m != nil {
		return m.UnpairingForUnstakingChunkInfo
	}
	return UnpairingForUnstakingChunkInfo{}
}

type QueryRedelegationInfosRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRedelegationInfosRequest) Reset()         { *m = QueryRedelegationInfosRequest{} }
func (m *QueryRedelegationInfosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedelegationInfosRequest) ProtoMessage()    {}
func (*QueryRedelegationInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{20}
}
func (m *QueryRedelegationInfosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedelegationInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedelegationInfosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedelegationInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedelegationInfosRequest.Merge(m, src)
}
func (m *QueryRedelegationInfosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedelegationInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedelegationInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedelegationInfosRequest proto.InternalMessageInfo

func (m *QueryRedelegationInfosRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRedelegationInfosResponse struct {
	RedelegationInfos []RedelegationInfo  `protobuf:"bytes,1,rep,name=redelegation_infos,json=redelegationInfos,proto3" json:"redelegation_infos"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRedelegationInfosResponse) Reset()         { *m = QueryRedelegationInfosResponse{} }
func (m *QueryRedelegationInfosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedelegationInfosResponse) ProtoMessage()    {}
func (*QueryRedelegationInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{21}
}
func (m *QueryRedelegationInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedelegationInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedelegationInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedelegationInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedelegationInfosResponse.Merge(m, src)
}
func (m *QueryRedelegationInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedelegationInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedelegationInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedelegationInfosResponse proto.InternalMessageInfo

func (m *QueryRedelegationInfosResponse) GetRedelegationInfos() []RedelegationInfo {
	if m != nil {
		return m.RedelegationInfos
	}
	return nil
}

func (m *QueryRedelegationInfosResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRedelegationInfoRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryRedelegationInfoRequest) Reset()         { *m = QueryRedelegationInfoRequest{} }
func (m *QueryRedelegationInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRedelegationInfoRequest) ProtoMessage()    {}
func (*QueryRedelegationInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{22}
}
func (m *QueryRedelegationInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedelegationInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedelegationInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedelegationInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedelegationInfoRequest.Merge(m, src)
}
func (m *QueryRedelegationInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedelegationInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedelegationInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedelegationInfoRequest proto.InternalMessageInfo

func (m *QueryRedelegationInfoRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryRedelegationInfoResponse struct {
	RedelegationInfo RedelegationInfo `protobuf:"bytes,1,opt,name=redelegation_info,json=redelegationInfo,proto3" json:"redelegation_info"`
}

func (m *QueryRedelegationInfoResponse) Reset()         { *m = QueryRedelegationInfoResponse{} }
func (m *QueryRedelegationInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRedelegationInfoResponse) ProtoMessage()    {}
func (*QueryRedelegationInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{23}
}
func (m *QueryRedelegationInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRedelegationInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRedelegationInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRedelegationInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRedelegationInfoResponse.Merge(m, src)
}
func (m *QueryRedelegationInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRedelegationInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRedelegationInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRedelegationInfoResponse proto.InternalMessageInfo

func (m *QueryRedelegationInfoResponse) GetRedelegationInfo() RedelegationInfo {
	if m != nil {
		return m.RedelegationInfo
	}
	return RedelegationInfo{}
}

type QueryChunkSizeRequest struct {
}

func (m *QueryChunkSizeRequest) Reset()         { *m = QueryChunkSizeRequest{} }
func (m *QueryChunkSizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChunkSizeRequest) ProtoMessage()    {}
func (*QueryChunkSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{24}
}
func (m *QueryChunkSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkSizeRequest.Merge(m, src)
}
func (m *QueryChunkSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkSizeRequest proto.InternalMessageInfo

type QueryChunkSizeResponse struct {
	ChunkSize types.Coin `protobuf:"bytes,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size"`
}

func (m *QueryChunkSizeResponse) Reset()         { *m = QueryChunkSizeResponse{} }
func (m *QueryChunkSizeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChunkSizeResponse) ProtoMessage()    {}
func (*QueryChunkSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{25}
}
func (m *QueryChunkSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChunkSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChunkSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChunkSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChunkSizeResponse.Merge(m, src)
}
func (m *QueryChunkSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChunkSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChunkSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChunkSizeResponse proto.InternalMessageInfo

func (m *QueryChunkSizeResponse) GetChunkSize() types.Coin {
	if m != nil {
		return m.ChunkSize
	}
	return types.Coin{}
}

type QueryMinimumCollateralRequest struct {
}

func (m *QueryMinimumCollateralRequest) Reset()         { *m = QueryMinimumCollateralRequest{} }
func (m *QueryMinimumCollateralRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMinimumCollateralRequest) ProtoMessage()    {}
func (*QueryMinimumCollateralRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{26}
}
func (m *QueryMinimumCollateralRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMinimumCollateralRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMinimumCollateralRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMinimumCollateralRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMinimumCollateralRequest.Merge(m, src)
}
func (m *QueryMinimumCollateralRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMinimumCollateralRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMinimumCollateralRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMinimumCollateralRequest proto.InternalMessageInfo

type QueryMinimumCollateralResponse struct {
	MinimumCollateral types.DecCoin `protobuf:"bytes,2,opt,name=minimum_collateral,json=minimumCollateral,proto3" json:"minimum_collateral"`
}

func (m *QueryMinimumCollateralResponse) Reset()         { *m = QueryMinimumCollateralResponse{} }
func (m *QueryMinimumCollateralResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMinimumCollateralResponse) ProtoMessage()    {}
func (*QueryMinimumCollateralResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{27}
}
func (m *QueryMinimumCollateralResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMinimumCollateralResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMinimumCollateralResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMinimumCollateralResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMinimumCollateralResponse.Merge(m, src)
}
func (m *QueryMinimumCollateralResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMinimumCollateralResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMinimumCollateralResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMinimumCollateralResponse proto.InternalMessageInfo

func (m *QueryMinimumCollateralResponse) GetMinimumCollateral() types.DecCoin {
	if m != nil {
		return m.MinimumCollateral
	}
	return types.DecCoin{}
}

type QueryStatesRequest struct {
}

func (m *QueryStatesRequest) Reset()         { *m = QueryStatesRequest{} }
func (m *QueryStatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStatesRequest) ProtoMessage()    {}
func (*QueryStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{28}
}
func (m *QueryStatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatesRequest.Merge(m, src)
}
func (m *QueryStatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatesRequest proto.InternalMessageInfo

type QueryStatesResponse struct {
	NetAmountState NetAmountState `protobuf:"bytes,1,opt,name=net_amount_state,json=netAmountState,proto3" json:"net_amount_state"`
}

func (m *QueryStatesResponse) Reset()         { *m = QueryStatesResponse{} }
func (m *QueryStatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStatesResponse) ProtoMessage()    {}
func (*QueryStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04856e9492a9fb6, []int{29}
}
func (m *QueryStatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatesResponse.Merge(m, src)
}
func (m *QueryStatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatesResponse proto.InternalMessageInfo

func (m *QueryStatesResponse) GetNetAmountState() NetAmountState {
	if m != nil {
		return m.NetAmountState
	}
	return NetAmountState{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "canto.liquidstaking.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "canto.liquidstaking.v1.QueryParamsResponse")
	proto.RegisterType((*QueryEpochRequest)(nil), "canto.liquidstaking.v1.QueryEpochRequest")
	proto.RegisterType((*QueryEpochResponse)(nil), "canto.liquidstaking.v1.QueryEpochResponse")
	proto.RegisterType((*QueryChunksRequest)(nil), "canto.liquidstaking.v1.QueryChunksRequest")
	proto.RegisterType((*QueryChunksResponse)(nil), "canto.liquidstaking.v1.QueryChunksResponse")
	proto.RegisterType((*QueryChunkRequest)(nil), "canto.liquidstaking.v1.QueryChunkRequest")
	proto.RegisterType((*QueryChunkResponse)(nil), "canto.liquidstaking.v1.QueryChunkResponse")
	proto.RegisterType((*QueryInsurancesRequest)(nil), "canto.liquidstaking.v1.QueryInsurancesRequest")
	proto.RegisterType((*QueryInsurancesResponse)(nil), "canto.liquidstaking.v1.QueryInsurancesResponse")
	proto.RegisterType((*QueryInsuranceRequest)(nil), "canto.liquidstaking.v1.QueryInsuranceRequest")
	proto.RegisterType((*QueryInsuranceResponse)(nil), "canto.liquidstaking.v1.QueryInsuranceResponse")
	proto.RegisterType((*QueryWithdrawInsuranceRequestsRequest)(nil), "canto.liquidstaking.v1.QueryWithdrawInsuranceRequestsRequest")
	proto.RegisterType((*QueryWithdrawInsuranceRequestsResponse)(nil), "canto.liquidstaking.v1.QueryWithdrawInsuranceRequestsResponse")
	proto.RegisterType((*QueryWithdrawInsuranceRequestRequest)(nil), "canto.liquidstaking.v1.QueryWithdrawInsuranceRequestRequest")
	proto.RegisterType((*QueryWithdrawInsuranceRequestResponse)(nil), "canto.liquidstaking.v1.QueryWithdrawInsuranceRequestResponse")
	proto.RegisterType((*QueryUnpairingForUnstakingChunkInfosRequest)(nil), "canto.liquidstaking.v1.QueryUnpairingForUnstakingChunkInfosRequest")
	proto.RegisterType((*QueryUnpairingForUnstakingChunkInfosResponse)(nil), "canto.liquidstaking.v1.QueryUnpairingForUnstakingChunkInfosResponse")
	proto.RegisterType((*QueryUnpairingForUnstakingChunkInfoRequest)(nil), "canto.liquidstaking.v1.QueryUnpairingForUnstakingChunkInfoRequest")
	proto.RegisterType((*QueryUnpairingForUnstakingChunkInfoResponse)(nil), "canto.liquidstaking.v1.QueryUnpairingForUnstakingChunkInfoResponse")
	proto.RegisterType((*QueryRedelegationInfosRequest)(nil), "canto.liquidstaking.v1.QueryRedelegationInfosRequest")
	proto.RegisterType((*QueryRedelegationInfosResponse)(nil), "canto.liquidstaking.v1.QueryRedelegationInfosResponse")
	proto.RegisterType((*QueryRedelegationInfoRequest)(nil), "canto.liquidstaking.v1.QueryRedelegationInfoRequest")
	proto.RegisterType((*QueryRedelegationInfoResponse)(nil), "canto.liquidstaking.v1.QueryRedelegationInfoResponse")
	proto.RegisterType((*QueryChunkSizeRequest)(nil), "canto.liquidstaking.v1.QueryChunkSizeRequest")
	proto.RegisterType((*QueryChunkSizeResponse)(nil), "canto.liquidstaking.v1.QueryChunkSizeResponse")
	proto.RegisterType((*QueryMinimumCollateralRequest)(nil), "canto.liquidstaking.v1.QueryMinimumCollateralRequest")
	proto.RegisterType((*QueryMinimumCollateralResponse)(nil), "canto.liquidstaking.v1.QueryMinimumCollateralResponse")
	proto.RegisterType((*QueryStatesRequest)(nil), "canto.liquidstaking.v1.QueryStatesRequest")
	proto.RegisterType((*QueryStatesResponse)(nil), "canto.liquidstaking.v1.QueryStatesResponse")
}

func init() {
	proto.RegisterFile("canto/liquidstaking/v1/query.proto", fileDescriptor_a04856e9492a9fb6)
}

var fileDescriptor_a04856e9492a9fb6 = []byte{
	// 1518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xcb, 0x6f, 0x1b, 0xd5,
	0x17, 0xce, 0x4d, 0x9b, 0xe8, 0x97, 0x53, 0x29, 0xb5, 0x6f, 0x5f, 0xa9, 0x7f, 0xad, 0x53, 0x26,
	0x6d, 0x93, 0x26, 0xad, 0x87, 0xa4, 0x34, 0x50, 0xd1, 0x06, 0x1a, 0xf7, 0x41, 0x41, 0xf4, 0xe1,
	0x52, 0x40, 0x20, 0x64, 0x4d, 0x3c, 0x37, 0xce, 0xa8, 0xf6, 0x5c, 0x67, 0x1e, 0x4e, 0x5b, 0x60,
	0x83, 0x40, 0xe2, 0xb1, 0x41, 0xaa, 0x84, 0x54, 0x10, 0x7b, 0xd6, 0x2c, 0x50, 0x85, 0x84, 0xd8,
	0x76, 0x59, 0x89, 0x0d, 0x2b, 0x84, 0xd2, 0x6e, 0xf8, 0x0f, 0x80, 0x15, 0xf2, 0x9d, 0x33, 0x63,
	0xcf, 0xd8, 0x77, 0x66, 0xec, 0x64, 0x57, 0xdf, 0x7b, 0x1e, 0xdf, 0xf9, 0xce, 0xd7, 0x3b, 0xe7,
	0x28, 0xa0, 0x54, 0x34, 0xd3, 0xe1, 0x6a, 0xcd, 0x58, 0x77, 0x0d, 0xdd, 0x76, 0xb4, 0x3b, 0x86,
	0x59, 0x55, 0x9b, 0xf3, 0xea, 0xba, 0xcb, 0xac, 0x7b, 0x85, 0x86, 0xc5, 0x1d, 0x4e, 0xf7, 0x0b,
	0x9b, 0x42, 0xc8, 0xa6, 0xd0, 0x9c, 0xcf, 0xed, 0xad, 0xf2, 0x2a, 0x17, 0x26, 0x6a, 0xeb, 0x5f,
	0x9e, 0x75, 0xee, 0x50, 0x95, 0xf3, 0x6a, 0x8d, 0xa9, 0x5a, 0xc3, 0x50, 0x35, 0xd3, 0xe4, 0x8e,
	0xe6, 0x18, 0xdc, 0xb4, 0xf1, 0x36, 0x5f, 0xe1, 0x76, 0x9d, 0xdb, 0xea, 0x8a, 0x66, 0x33, 0xb5,
	0x39, 0xbf, 0xc2, 0x1c, 0x6d, 0x5e, 0xad, 0x70, 0xc3, 0xc4, 0xfb, 0xd9, 0xce, 0x7b, 0x01, 0x22,
	0xb0, 0x6a, 0x68, 0x55, 0xc3, 0x14, 0xc1, 0x02, 0xdb, 0xde, 0xd8, 0xc3, 0x40, 0x85, 0xad, 0xb2,
	0x17, 0xe8, 0xcd, 0x56, 0xb4, 0x1b, 0x9a, 0xa5, 0xd5, 0xed, 0x12, 0x5b, 0x77, 0x99, 0xed, 0x28,
	0xb7, 0x60, 0x4f, 0xe8, 0xd4, 0x6e, 0x70, 0xd3, 0x66, 0xf4, 0x1c, 0x8c, 0x36, 0xc4, 0xc9, 0x04,
	0x39, 0x42, 0x66, 0x76, 0x2d, 0xe4, 0x0b, 0xbd, 0x19, 0x28, 0x78, 0x7e, 0xcb, 0x3b, 0x1f, 0xff,
	0x31, 0x39, 0x54, 0x42, 0x1f, 0x65, 0x0f, 0x64, 0x45, 0xd0, 0x4b, 0x0d, 0x5e, 0x59, 0xf3, 0x33,
	0x5d, 0xc7, 0xfc, 0x78, 0x88, 0x89, 0xce, 0xc2, 0x08, 0x6b, 0x1d, 0x60, 0x9e, 0xc3, 0xb2, 0x3c,
	0xc2, 0x0b, 0xd3, 0x78, 0x1e, 0xca, 0x43, 0x82, 0x11, 0x8b, 0x6b, 0xae, 0x79, 0xc7, 0xaf, 0x88,
	0xbe, 0x0c, 0xa3, 0xb6, 0xa3, 0x39, 0xae, 0x07, 0x7d, 0x7c, 0x61, 0x4a, 0x16, 0x52, 0xb8, 0xdd,
	0x12, 0xa6, 0x25, 0x74, 0xa1, 0x97, 0x01, 0xda, 0x24, 0x4f, 0x0c, 0x0b, 0x4c, 0xc7, 0x0b, 0x5e,
	0x47, 0x0a, 0xad, 0x8e, 0x14, 0x3c, 0x59, 0x60, 0x47, 0x0a, 0x37, 0xb4, 0x2a, 0xc3, 0xc4, 0xa5,
	0x0e, 0x4f, 0xe5, 0x07, 0x82, 0xbc, 0xfa, 0xd8, 0xb0, 0xdc, 0xd7, 0x60, 0xb4, 0x22, 0x4e, 0x26,
	0xc8, 0x91, 0x1d, 0x33, 0xbb, 0x16, 0x66, 0x65, 0xe0, 0xda, 0xce, 0xbe, 0xaf, 0xcf, 0xb1, 0xe7,
	0x4f, 0xaf, 0xf4, 0x40, 0x3a, 0x9d, 0x88, 0xd4, 0x0b, 0x15, 0x82, 0x3a, 0x85, 0xcd, 0xc2, 0x64,
	0x1e, 0x89, 0xe3, 0x30, 0x6c, 0xe8, 0x82, 0xc0, 0x9d, 0xa5, 0x61, 0x43, 0x57, 0xee, 0x76, 0x52,
	0xdd, 0xd9, 0x3c, 0x81, 0x26, 0xa9, 0x79, 0xc2, 0xcb, 0x6f, 0x9e, 0xf0, 0xa0, 0xd3, 0xb0, 0x5b,
	0x67, 0x96, 0xd1, 0x64, 0x7a, 0x59, 0xd3, 0x75, 0x8b, 0xd9, 0xb6, 0xa8, 0x61, 0xac, 0x34, 0x8e,
	0xc7, 0x17, 0xbc, 0x53, 0xe5, 0x1f, 0x02, 0xfb, 0x45, 0xea, 0xab, 0xa6, 0xed, 0x5a, 0x9a, 0x59,
	0x61, 0x41, 0xa7, 0x5f, 0x89, 0x74, 0x7a, 0x5a, 0x96, 0x3f, 0x70, 0x8d, 0x74, 0x7b, 0x0e, 0xb2,
	0x4d, 0xad, 0x66, 0xe8, 0x9a, 0xc3, 0xad, 0x08, 0x8c, 0x4c, 0x70, 0x81, 0x40, 0xe8, 0x09, 0xc8,
	0x34, 0x2c, 0xde, 0x34, 0x74, 0xd6, 0xb6, 0xdd, 0x21, 0x6c, 0x77, 0xfb, 0xe7, 0xbe, 0x69, 0x58,
	0x45, 0x3b, 0x07, 0x56, 0xd1, 0x23, 0x02, 0x07, 0xba, 0x6a, 0x47, 0xee, 0xdf, 0x02, 0x30, 0x82,
	0x53, 0x54, 0x53, 0x21, 0x56, 0x4d, 0x41, 0x90, 0x88, 0xa2, 0x3a, 0xe2, 0x6c, 0x9f, 0xaa, 0xa6,
	0x61, 0x5f, 0x34, 0x69, 0x6f, 0x65, 0xfd, 0xd8, 0xd5, 0xdf, 0xa0, 0xc4, 0x4b, 0x30, 0x16, 0x40,
	0x43, 0x89, 0x3d, 0x97, 0xd8, 0x62, 0x2c, 0xaa, 0xed, 0x99, 0x5a, 0x6a, 0x74, 0x06, 0x32, 0xab,
	0x8c, 0x95, 0x1b, 0x9c, 0xd7, 0x22, 0x1d, 0x1e, 0x5f, 0x65, 0xec, 0x06, 0xe7, 0x35, 0x5f, 0x94,
	0xdf, 0x12, 0x38, 0x26, 0x40, 0xbf, 0x63, 0x38, 0x6b, 0xba, 0xa5, 0x6d, 0x44, 0xcb, 0x0c, 0x34,
	0xda, 0x4b, 0x35, 0x24, 0x8d, 0x6a, 0x06, 0x7f, 0x7b, 0xfe, 0x22, 0x70, 0x3c, 0x09, 0x1c, 0x32,
	0xdc, 0x84, 0xff, 0x6f, 0xa0, 0x51, 0x39, 0x20, 0xac, 0x6c, 0xa1, 0x19, 0xaa, 0xea, 0x79, 0x19,
	0xe7, 0xb2, 0xf8, 0xd8, 0x82, 0x83, 0x1b, 0xb2, 0xfc, 0xdb, 0x27, 0xb3, 0x45, 0x38, 0x1a, 0x5b,
	0xaa, 0x4c, 0x75, 0xdf, 0x27, 0x35, 0x30, 0xa0, 0xc8, 0x81, 0x9c, 0x9c, 0x22, 0x54, 0xe5, 0xa0,
	0x0c, 0x4d, 0xc8, 0x18, 0x52, 0x7e, 0x26, 0x30, 0x27, 0xf0, 0xdd, 0x36, 0x1b, 0x9a, 0x61, 0x19,
	0x66, 0xf5, 0x32, 0xb7, 0x6e, 0x9b, 0x18, 0x5a, 0xbc, 0xa7, 0x57, 0xcd, 0x55, 0x1e, 0xc8, 0x6c,
	0x0e, 0xb2, 0x3a, 0xab, 0xb1, 0x6a, 0xe8, 0x25, 0xf3, 0x74, 0x96, 0x09, 0x2e, 0x7c, 0xa1, 0xed,
	0x87, 0xd1, 0x75, 0x97, 0xb9, 0x4c, 0x17, 0xcc, 0xff, 0xaf, 0x84, 0xbf, 0x22, 0x02, 0xdc, 0x31,
	0xb0, 0x00, 0x3f, 0x1d, 0x86, 0x93, 0xe9, 0xc0, 0x23, 0xc7, 0x5f, 0x12, 0x98, 0x72, 0x7d, 0xdb,
	0xf2, 0x2a, 0xb7, 0xca, 0xae, 0x6f, 0x5d, 0x16, 0x9f, 0x8b, 0xb2, 0xd1, 0xb2, 0x47, 0x3d, 0x2e,
	0xca, 0xd8, 0x8e, 0x4f, 0x87, 0x9c, 0x4f, 0xba, 0xf1, 0xa0, 0xb6, 0x4f, 0x9b, 0xe7, 0x60, 0x36,
	0x05, 0x0b, 0x32, 0x85, 0x3e, 0x4a, 0xa7, 0x80, 0x80, 0xc3, 0xcf, 0x09, 0x28, 0xc9, 0x1c, 0xa2,
	0x60, 0xb7, 0x46, 0x61, 0x3e, 0x9e, 0x42, 0xa5, 0x0a, 0x87, 0x05, 0xf2, 0x12, 0x43, 0xe9, 0x19,
	0xdc, 0x0c, 0xa9, 0x35, 0x2c, 0x34, 0x32, 0xb0, 0xd0, 0x1e, 0x13, 0xc8, 0xcb, 0x32, 0x21, 0x2d,
	0x1f, 0x00, 0xb5, 0x3a, 0x2e, 0x43, 0x42, 0x9a, 0x91, 0xb1, 0x10, 0x0d, 0x87, 0x75, 0x67, 0xad,
	0x68, 0x9a, 0xed, 0x13, 0x4b, 0x01, 0x0e, 0xf5, 0xac, 0x44, 0x26, 0x8f, 0x8f, 0x24, 0x1c, 0x07,
	0x85, 0xbf, 0x0f, 0xd9, 0xae, 0xc2, 0x91, 0xea, 0x7e, 0xeb, 0xce, 0x44, 0xeb, 0x56, 0x0e, 0xe0,
	0xd7, 0xdd, 0x1b, 0xa1, 0x8d, 0xfb, 0xc1, 0xbb, 0xf5, 0x2e, 0x7e, 0xcc, 0x3b, 0x2e, 0x10, 0xcf,
	0x12, 0x80, 0x27, 0x43, 0xdb, 0xb8, 0xef, 0x7f, 0xcd, 0x0f, 0x86, 0x98, 0xf2, 0x39, 0x2a, 0x72,
	0xc3, 0xf4, 0xbf, 0xe2, 0x15, 0x3f, 0x8e, 0x32, 0x89, 0x05, 0xbf, 0x69, 0x98, 0x46, 0xdd, 0xad,
	0x17, 0x79, 0xad, 0xa6, 0x39, 0xcc, 0xd2, 0x6a, 0x7e, 0x6a, 0x1b, 0xb5, 0xd0, 0xc3, 0x00, 0x21,
	0xdc, 0x04, 0x5a, 0xf7, 0x2e, 0xcb, 0x95, 0xe0, 0x16, 0x9b, 0x76, 0xa8, 0x27, 0x94, 0x8b, 0xac,
	0xd2, 0x81, 0x26, 0x5b, 0x8f, 0x86, 0x0e, 0x96, 0xaa, 0xd6, 0x60, 0x19, 0x0c, 0xa6, 0x4a, 0x1d,
	0x87, 0x7f, 0xff, 0x14, 0xf3, 0xbf, 0x0d, 0x19, 0x93, 0x39, 0x65, 0xad, 0xce, 0x5d, 0xd3, 0x29,
	0xb7, 0x66, 0x50, 0xd6, 0x16, 0x7f, 0xef, 0x8e, 0x5c, 0x63, 0xce, 0x05, 0x61, 0x2e, 0x42, 0x21,
	0x8e, 0x71, 0x33, 0x74, 0xba, 0xf0, 0x60, 0x1f, 0x8c, 0x88, 0x7c, 0xf4, 0x0b, 0x02, 0xa3, 0xde,
	0x46, 0x46, 0xe3, 0x37, 0x8b, 0xd0, 0x12, 0x98, 0x9b, 0x4b, 0x65, 0xeb, 0x55, 0xa1, 0x1c, 0xff,
	0xe4, 0xb7, 0x67, 0x0f, 0x86, 0x8f, 0xd0, 0xbc, 0x2a, 0x59, 0x3e, 0xbd, 0x25, 0x90, 0x7e, 0x46,
	0x60, 0x44, 0x6c, 0x6d, 0xf4, 0x44, 0x6c, 0xf8, 0xce, 0x25, 0x31, 0x37, 0x9b, 0xc6, 0x14, 0x81,
	0x1c, 0x13, 0x40, 0x26, 0xe9, 0x61, 0x19, 0x10, 0xb1, 0x26, 0x0a, 0x4e, 0xbc, 0x2d, 0x8c, 0xa6,
	0xd8, 0xb6, 0x52, 0x72, 0x12, 0x5e, 0xeb, 0x92, 0x39, 0xc1, 0xa5, 0xed, 0x2b, 0x02, 0x23, 0xc2,
	0x35, 0x81, 0x93, 0xce, 0x5d, 0x2c, 0xd7, 0xc7, 0x8e, 0xa8, 0xcc, 0x09, 0x20, 0xc7, 0xe8, 0x54,
	0x3c, 0x10, 0xf5, 0x43, 0x43, 0xff, 0x98, 0x3e, 0x24, 0x00, 0xed, 0xcd, 0x82, 0xa6, 0xdc, 0x1e,
	0x02, 0x86, 0xd4, 0xd4, 0xf6, 0x08, 0x6e, 0x56, 0x80, 0x3b, 0x4a, 0x15, 0x19, 0xb8, 0x8e, 0x45,
	0xe4, 0x3b, 0x02, 0x63, 0x41, 0x08, 0x7a, 0x2a, 0xed, 0x62, 0xe3, 0x21, 0xeb, 0x73, 0x0f, 0x52,
	0x54, 0x01, 0xec, 0x04, 0x9d, 0x4e, 0x06, 0xe6, 0x31, 0xb7, 0x49, 0xe0, 0xa0, 0x74, 0xba, 0xa6,
	0xe7, 0x63, 0xd3, 0x27, 0xad, 0x0c, 0xb9, 0xa5, 0x41, 0xdd, 0xb1, 0x9a, 0xcb, 0xa2, 0x9a, 0x57,
	0xe9, 0x52, 0x8a, 0x6a, 0x62, 0xa6, 0x7f, 0xfa, 0x8c, 0xc0, 0x84, 0x2c, 0x1b, 0x3d, 0x37, 0x10,
	0x48, 0xbf, 0xc4, 0xf3, 0x03, 0x7a, 0x63, 0x85, 0x6f, 0x88, 0x0a, 0x2f, 0xd1, 0x62, 0xca, 0x7e,
	0xc5, 0x96, 0xf9, 0x37, 0x81, 0xc9, 0x84, 0x41, 0x95, 0x16, 0x63, 0xf1, 0xa6, 0x9b, 0xd1, 0x73,
	0x17, 0xb7, 0x16, 0x04, 0x6b, 0x7f, 0x5d, 0xd4, 0x7e, 0x91, 0x2e, 0x27, 0xfc, 0x0f, 0x4f, 0x31,
	0x4f, 0xd3, 0x7f, 0x09, 0xe4, 0xe3, 0xf3, 0xd2, 0xe5, 0x2d, 0x80, 0xf6, 0x0b, 0x2f, 0x6e, 0x29,
	0x06, 0xd6, 0x7d, 0x5d, 0xd4, 0x7d, 0x95, 0x5e, 0x49, 0xf1, 0xb2, 0xa5, 0x2a, 0xfe, 0x17, 0x02,
	0xd9, 0xae, 0xb9, 0x91, 0x9e, 0x89, 0xc5, 0x2a, 0x9b, 0x68, 0x73, 0x8b, 0xfd, 0xba, 0x61, 0x55,
	0x67, 0x45, 0x55, 0xa7, 0xe9, 0x7c, 0x42, 0x55, 0xdd, 0x33, 0x2c, 0xfd, 0x95, 0x40, 0x26, 0x1a,
	0x98, 0xbe, 0xd0, 0x17, 0x0e, 0x1f, 0xfd, 0x99, 0x3e, 0xbd, 0x10, 0xfc, 0x92, 0x00, 0xff, 0x12,
	0x5d, 0x4c, 0xd3, 0x92, 0x1e, 0x15, 0x7c, 0x43, 0x60, 0x2c, 0x18, 0x14, 0x13, 0xde, 0xf8, 0xe8,
	0xa4, 0x99, 0xf0, 0xc6, 0x77, 0xcd, 0x9f, 0xc9, 0x1f, 0x9f, 0xf6, 0x74, 0x4a, 0x7f, 0x22, 0x90,
	0xed, 0x1a, 0x23, 0x13, 0xa4, 0x21, 0x9b, 0x4b, 0x13, 0xa4, 0x21, 0x9d, 0x56, 0x95, 0x05, 0x01,
	0xf8, 0x24, 0x9d, 0x95, 0x01, 0xee, 0x9e, 0x65, 0xc5, 0xac, 0xe3, 0x0d, 0x9d, 0x09, 0xb3, 0x4e,
	0x68, 0x5e, 0x4d, 0x98, 0x75, 0xc2, 0x53, 0x6c, 0xf2, 0xac, 0x23, 0x06, 0x5b, 0x7b, 0xf9, 0xe6,
	0xe3, 0xcd, 0x3c, 0x79, 0xb2, 0x99, 0x27, 0x7f, 0x6e, 0xe6, 0xc9, 0xd7, 0x4f, 0xf3, 0x43, 0x4f,
	0x9e, 0xe6, 0x87, 0x7e, 0x7f, 0x9a, 0x1f, 0x7a, 0xef, 0xc5, 0xaa, 0xe1, 0xac, 0xb9, 0x2b, 0x85,
	0x0a, 0xaf, 0xab, 0xc5, 0x56, 0x8c, 0x53, 0xd7, 0x98, 0xb3, 0xc1, 0xad, 0x3b, 0xde, 0x2f, 0xb5,
	0xb9, 0xa8, 0xde, 0x8d, 0x84, 0x75, 0xee, 0x35, 0x98, 0xbd, 0x32, 0x2a, 0xfe, 0x92, 0x71, 0xfa,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xcd, 0xc8, 0xac, 0xb3, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params retrieves the total set of minting parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Epoch(ctx context.Context, in *QueryEpochRequest, opts ...grpc.CallOption) (*QueryEpochResponse, error)
	// Chunk returns all chunks on the module.
	Chunks(ctx context.Context, in *QueryChunksRequest, opts ...grpc.CallOption) (*QueryChunksResponse, error)
	// Chunk returns a chunk by id.
	Chunk(ctx context.Context, in *QueryChunkRequest, opts ...grpc.CallOption) (*QueryChunkResponse, error)
	// Insurances returns all insurances on the module.
	Insurances(ctx context.Context, in *QueryInsurancesRequest, opts ...grpc.CallOption) (*QueryInsurancesResponse, error)
	// Insurance returns an insurance by id.
	Insurance(ctx context.Context, in *QueryInsuranceRequest, opts ...grpc.CallOption) (*QueryInsuranceResponse, error)
	// WithdrawInsuranceRequests returns all withdraw insurance requests on the
	// module.
	WithdrawInsuranceRequests(ctx context.Context, in *QueryWithdrawInsuranceRequestsRequest, opts ...grpc.CallOption) (*QueryWithdrawInsuranceRequestsResponse, error)
	// WithdrawInsuranceRequest returns a withdraw insurance request by id.
	WithdrawInsuranceRequest(ctx context.Context, in *QueryWithdrawInsuranceRequestRequest, opts ...grpc.CallOption) (*QueryWithdrawInsuranceRequestResponse, error)
	// UnpairingForUnstakingChunkInfos returns all unpairing for unstaking chunk
	// infos on the module.
	UnpairingForUnstakingChunkInfos(ctx context.Context, in *QueryUnpairingForUnstakingChunkInfosRequest, opts ...grpc.CallOption) (*QueryUnpairingForUnstakingChunkInfosResponse, error)
	// UnpairingForUnstakingChunkInfo returns a unpairing for unstaking chunk info
	// by id.
	UnpairingForUnstakingChunkInfo(ctx context.Context, in *QueryUnpairingForUnstakingChunkInfoRequest, opts ...grpc.CallOption) (*QueryUnpairingForUnstakingChunkInfoResponse, error)
	RedelegationInfos(ctx context.Context, in *QueryRedelegationInfosRequest, opts ...grpc.CallOption) (*QueryRedelegationInfosResponse, error)
	RedelegationInfo(ctx context.Context, in *QueryRedelegationInfoRequest, opts ...grpc.CallOption) (*QueryRedelegationInfoResponse, error)
	// ChunkSize returns the chunk size of the module.
	ChunkSize(ctx context.Context, in *QueryChunkSizeRequest, opts ...grpc.CallOption) (*QueryChunkSizeResponse, error)
	// MinimumCollateral returns the minimum collateral of the module.
	// Insurance providers must provide collateral greater than or equal to the
	// minimum collateral.
	MinimumCollateral(ctx context.Context, in *QueryMinimumCollateralRequest, opts ...grpc.CallOption) (*QueryMinimumCollateralResponse, error)
	// States returns the states of the module.
	States(ctx context.Context, in *QueryStatesRequest, opts ...grpc.CallOption) (*QueryStatesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Epoch(ctx context.Context, in *QueryEpochRequest, opts ...grpc.CallOption) (*QueryEpochResponse, error) {
	out := new(QueryEpochResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/Epoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Chunks(ctx context.Context, in *QueryChunksRequest, opts ...grpc.CallOption) (*QueryChunksResponse, error) {
	out := new(QueryChunksResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/Chunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Chunk(ctx context.Context, in *QueryChunkRequest, opts ...grpc.CallOption) (*QueryChunkResponse, error) {
	out := new(QueryChunkResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/Chunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Insurances(ctx context.Context, in *QueryInsurancesRequest, opts ...grpc.CallOption) (*QueryInsurancesResponse, error) {
	out := new(QueryInsurancesResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/Insurances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Insurance(ctx context.Context, in *QueryInsuranceRequest, opts ...grpc.CallOption) (*QueryInsuranceResponse, error) {
	out := new(QueryInsuranceResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/Insurance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawInsuranceRequests(ctx context.Context, in *QueryWithdrawInsuranceRequestsRequest, opts ...grpc.CallOption) (*QueryWithdrawInsuranceRequestsResponse, error) {
	out := new(QueryWithdrawInsuranceRequestsResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/WithdrawInsuranceRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawInsuranceRequest(ctx context.Context, in *QueryWithdrawInsuranceRequestRequest, opts ...grpc.CallOption) (*QueryWithdrawInsuranceRequestResponse, error) {
	out := new(QueryWithdrawInsuranceRequestResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/WithdrawInsuranceRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnpairingForUnstakingChunkInfos(ctx context.Context, in *QueryUnpairingForUnstakingChunkInfosRequest, opts ...grpc.CallOption) (*QueryUnpairingForUnstakingChunkInfosResponse, error) {
	out := new(QueryUnpairingForUnstakingChunkInfosResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/UnpairingForUnstakingChunkInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnpairingForUnstakingChunkInfo(ctx context.Context, in *QueryUnpairingForUnstakingChunkInfoRequest, opts ...grpc.CallOption) (*QueryUnpairingForUnstakingChunkInfoResponse, error) {
	out := new(QueryUnpairingForUnstakingChunkInfoResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/UnpairingForUnstakingChunkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedelegationInfos(ctx context.Context, in *QueryRedelegationInfosRequest, opts ...grpc.CallOption) (*QueryRedelegationInfosResponse, error) {
	out := new(QueryRedelegationInfosResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/RedelegationInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RedelegationInfo(ctx context.Context, in *QueryRedelegationInfoRequest, opts ...grpc.CallOption) (*QueryRedelegationInfoResponse, error) {
	out := new(QueryRedelegationInfoResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/RedelegationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChunkSize(ctx context.Context, in *QueryChunkSizeRequest, opts ...grpc.CallOption) (*QueryChunkSizeResponse, error) {
	out := new(QueryChunkSizeResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/ChunkSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MinimumCollateral(ctx context.Context, in *QueryMinimumCollateralRequest, opts ...grpc.CallOption) (*QueryMinimumCollateralResponse, error) {
	out := new(QueryMinimumCollateralResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/MinimumCollateral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) States(ctx context.Context, in *QueryStatesRequest, opts ...grpc.CallOption) (*QueryStatesResponse, error) {
	out := new(QueryStatesResponse)
	err := c.cc.Invoke(ctx, "/canto.liquidstaking.v1.Query/States", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params retrieves the total set of minting parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Epoch(context.Context, *QueryEpochRequest) (*QueryEpochResponse, error)
	// Chunk returns all chunks on the module.
	Chunks(context.Context, *QueryChunksRequest) (*QueryChunksResponse, error)
	// Chunk returns a chunk by id.
	Chunk(context.Context, *QueryChunkRequest) (*QueryChunkResponse, error)
	// Insurances returns all insurances on the module.
	Insurances(context.Context, *QueryInsurancesRequest) (*QueryInsurancesResponse, error)
	// Insurance returns an insurance by id.
	Insurance(context.Context, *QueryInsuranceRequest) (*QueryInsuranceResponse, error)
	// WithdrawInsuranceRequests returns all withdraw insurance requests on the
	// module.
	WithdrawInsuranceRequests(context.Context, *QueryWithdrawInsuranceRequestsRequest) (*QueryWithdrawInsuranceRequestsResponse, error)
	// WithdrawInsuranceRequest returns a withdraw insurance request by id.
	WithdrawInsuranceRequest(context.Context, *QueryWithdrawInsuranceRequestRequest) (*QueryWithdrawInsuranceRequestResponse, error)
	// UnpairingForUnstakingChunkInfos returns all unpairing for unstaking chunk
	// infos on the module.
	UnpairingForUnstakingChunkInfos(context.Context, *QueryUnpairingForUnstakingChunkInfosRequest) (*QueryUnpairingForUnstakingChunkInfosResponse, error)
	// UnpairingForUnstakingChunkInfo returns a unpairing for unstaking chunk info
	// by id.
	UnpairingForUnstakingChunkInfo(context.Context, *QueryUnpairingForUnstakingChunkInfoRequest) (*QueryUnpairingForUnstakingChunkInfoResponse, error)
	RedelegationInfos(context.Context, *QueryRedelegationInfosRequest) (*QueryRedelegationInfosResponse, error)
	RedelegationInfo(context.Context, *QueryRedelegationInfoRequest) (*QueryRedelegationInfoResponse, error)
	// ChunkSize returns the chunk size of the module.
	ChunkSize(context.Context, *QueryChunkSizeRequest) (*QueryChunkSizeResponse, error)
	// MinimumCollateral returns the minimum collateral of the module.
	// Insurance providers must provide collateral greater than or equal to the
	// minimum collateral.
	MinimumCollateral(context.Context, *QueryMinimumCollateralRequest) (*QueryMinimumCollateralResponse, error)
	// States returns the states of the module.
	States(context.Context, *QueryStatesRequest) (*QueryStatesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Epoch(ctx context.Context, req *QueryEpochRequest) (*QueryEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Epoch not implemented")
}
func (*UnimplementedQueryServer) Chunks(ctx context.Context, req *QueryChunksRequest) (*QueryChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chunks not implemented")
}
func (*UnimplementedQueryServer) Chunk(ctx context.Context, req *QueryChunkRequest) (*QueryChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chunk not implemented")
}
func (*UnimplementedQueryServer) Insurances(ctx context.Context, req *QueryInsurancesRequest) (*QueryInsurancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insurances not implemented")
}
func (*UnimplementedQueryServer) Insurance(ctx context.Context, req *QueryInsuranceRequest) (*QueryInsuranceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insurance not implemented")
}
func (*UnimplementedQueryServer) WithdrawInsuranceRequests(ctx context.Context, req *QueryWithdrawInsuranceRequestsRequest) (*QueryWithdrawInsuranceRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawInsuranceRequests not implemented")
}
func (*UnimplementedQueryServer) WithdrawInsuranceRequest(ctx context.Context, req *QueryWithdrawInsuranceRequestRequest) (*QueryWithdrawInsuranceRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawInsuranceRequest not implemented")
}
func (*UnimplementedQueryServer) UnpairingForUnstakingChunkInfos(ctx context.Context, req *QueryUnpairingForUnstakingChunkInfosRequest) (*QueryUnpairingForUnstakingChunkInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpairingForUnstakingChunkInfos not implemented")
}
func (*UnimplementedQueryServer) UnpairingForUnstakingChunkInfo(ctx context.Context, req *QueryUnpairingForUnstakingChunkInfoRequest) (*QueryUnpairingForUnstakingChunkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpairingForUnstakingChunkInfo not implemented")
}
func (*UnimplementedQueryServer) RedelegationInfos(ctx context.Context, req *QueryRedelegationInfosRequest) (*QueryRedelegationInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedelegationInfos not implemented")
}
func (*UnimplementedQueryServer) RedelegationInfo(ctx context.Context, req *QueryRedelegationInfoRequest) (*QueryRedelegationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedelegationInfo not implemented")
}
func (*UnimplementedQueryServer) ChunkSize(ctx context.Context, req *QueryChunkSizeRequest) (*QueryChunkSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkSize not implemented")
}
func (*UnimplementedQueryServer) MinimumCollateral(ctx context.Context, req *QueryMinimumCollateralRequest) (*QueryMinimumCollateralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinimumCollateral not implemented")
}
func (*UnimplementedQueryServer) States(ctx context.Context, req *QueryStatesRequest) (*QueryStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method States not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Epoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Epoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/Epoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Epoch(ctx, req.(*QueryEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Chunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Chunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/Chunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Chunks(ctx, req.(*QueryChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Chunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Chunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/Chunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Chunk(ctx, req.(*QueryChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Insurances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsurancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Insurances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/Insurances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Insurances(ctx, req.(*QueryInsurancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Insurance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Insurance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/Insurance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Insurance(ctx, req.(*QueryInsuranceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawInsuranceRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawInsuranceRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawInsuranceRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/WithdrawInsuranceRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawInsuranceRequests(ctx, req.(*QueryWithdrawInsuranceRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawInsuranceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawInsuranceRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawInsuranceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/WithdrawInsuranceRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawInsuranceRequest(ctx, req.(*QueryWithdrawInsuranceRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnpairingForUnstakingChunkInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnpairingForUnstakingChunkInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnpairingForUnstakingChunkInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/UnpairingForUnstakingChunkInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnpairingForUnstakingChunkInfos(ctx, req.(*QueryUnpairingForUnstakingChunkInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnpairingForUnstakingChunkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnpairingForUnstakingChunkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnpairingForUnstakingChunkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/UnpairingForUnstakingChunkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnpairingForUnstakingChunkInfo(ctx, req.(*QueryUnpairingForUnstakingChunkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedelegationInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedelegationInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedelegationInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/RedelegationInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedelegationInfos(ctx, req.(*QueryRedelegationInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RedelegationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRedelegationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RedelegationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/RedelegationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RedelegationInfo(ctx, req.(*QueryRedelegationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChunkSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChunkSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChunkSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/ChunkSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChunkSize(ctx, req.(*QueryChunkSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MinimumCollateral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMinimumCollateralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinimumCollateral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/MinimumCollateral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinimumCollateral(ctx, req.(*QueryMinimumCollateralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_States_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).States(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.liquidstaking.v1.Query/States",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).States(ctx, req.(*QueryStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canto.liquidstaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Epoch",
			Handler:    _Query_Epoch_Handler,
		},
		{
			MethodName: "Chunks",
			Handler:    _Query_Chunks_Handler,
		},
		{
			MethodName: "Chunk",
			Handler:    _Query_Chunk_Handler,
		},
		{
			MethodName: "Insurances",
			Handler:    _Query_Insurances_Handler,
		},
		{
			MethodName: "Insurance",
			Handler:    _Query_Insurance_Handler,
		},
		{
			MethodName: "WithdrawInsuranceRequests",
			Handler:    _Query_WithdrawInsuranceRequests_Handler,
		},
		{
			MethodName: "WithdrawInsuranceRequest",
			Handler:    _Query_WithdrawInsuranceRequest_Handler,
		},
		{
			MethodName: "UnpairingForUnstakingChunkInfos",
			Handler:    _Query_UnpairingForUnstakingChunkInfos_Handler,
		},
		{
			MethodName: "UnpairingForUnstakingChunkInfo",
			Handler:    _Query_UnpairingForUnstakingChunkInfo_Handler,
		},
		{
			MethodName: "RedelegationInfos",
			Handler:    _Query_RedelegationInfos_Handler,
		},
		{
			MethodName: "RedelegationInfo",
			Handler:    _Query_RedelegationInfo_Handler,
		},
		{
			MethodName: "ChunkSize",
			Handler:    _Query_ChunkSize_Handler,
		},
		{
			MethodName: "MinimumCollateral",
			Handler:    _Query_MinimumCollateral_Handler,
		},
		{
			MethodName: "States",
			Handler:    _Query_States_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canto/liquidstaking/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChunksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chunks) > 0 {
		for iNdEx := len(m.Chunks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chunks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChunkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DerivedAddress) > 0 {
		i -= len(m.DerivedAddress)
		copy(dAtA[i:], m.DerivedAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DerivedAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Chunk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInsurancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsurancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsurancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsurancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsurancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsurancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Insurances) > 0 {
		for iNdEx := len(m.Insurances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Insurances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeePoolAddress) > 0 {
		i -= len(m.FeePoolAddress)
		copy(dAtA[i:], m.FeePoolAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeePoolAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DerivedAddress) > 0 {
		i -= len(m.DerivedAddress)
		copy(dAtA[i:], m.DerivedAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DerivedAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Insurance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawInsuranceRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawInsuranceRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawInsuranceRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawInsuranceRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawInsuranceRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawInsuranceRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawInsuranceRequests) > 0 {
		for iNdEx := len(m.WithdrawInsuranceRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawInsuranceRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawInsuranceRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawInsuranceRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawInsuranceRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawInsuranceRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawInsuranceRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawInsuranceRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WithdrawInsuranceRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUnpairingForUnstakingChunkInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnpairingForUnstakingChunkInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnpairingForUnstakingChunkInfosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Queued {
		i--
		if m.Queued {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnpairingForUnstakingChunkInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnpairingForUnstakingChunkInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnpairingForUnstakingChunkInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnpairingForUnstakingChunkInfos) > 0 {
		for iNdEx := len(m.UnpairingForUnstakingChunkInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnpairingForUnstakingChunkInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnpairingForUnstakingChunkInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnpairingForUnstakingChunkInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnpairingForUnstakingChunkInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnpairingForUnstakingChunkInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnpairingForUnstakingChunkInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnpairingForUnstakingChunkInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnpairingForUnstakingChunkInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRedelegationInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedelegationInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedelegationInfosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedelegationInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedelegationInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedelegationInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RedelegationInfos) > 0 {
		for iNdEx := len(m.RedelegationInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RedelegationInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedelegationInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedelegationInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedelegationInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRedelegationInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRedelegationInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRedelegationInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RedelegationInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChunkSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChunkSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChunkSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChunkSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChunkSize.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMinimumCollateralRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMinimumCollateralRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMinimumCollateralRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMinimumCollateralResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMinimumCollateralResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMinimumCollateralResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinimumCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *QueryStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NetAmountState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Epoch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChunksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChunksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chunks) > 0 {
		for _, e := range m.Chunks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChunkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryChunkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Chunk.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.DerivedAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsurancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsurancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Insurances) > 0 {
		for _, e := range m.Insurances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInsuranceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryInsuranceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Insurance.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.DerivedAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FeePoolAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawInsuranceRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawInsuranceRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WithdrawInsuranceRequests) > 0 {
		for _, e := range m.WithdrawInsuranceRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawInsuranceRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryWithdrawInsuranceRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.WithdrawInsuranceRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUnpairingForUnstakingChunkInfosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Queued {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnpairingForUnstakingChunkInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnpairingForUnstakingChunkInfos) > 0 {
		for _, e := range m.UnpairingForUnstakingChunkInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnpairingForUnstakingChunkInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryUnpairingForUnstakingChunkInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnpairingForUnstakingChunkInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRedelegationInfosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedelegationInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedelegationInfos) > 0 {
		for _, e := range m.RedelegationInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRedelegationInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryRedelegationInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RedelegationInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChunkSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChunkSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChunkSize.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMinimumCollateralRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMinimumCollateralResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinimumCollateral.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NetAmountState.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChunkStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks, QueryChunkResponse{})
			if err := m.Chunks[len(m.Chunks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chunk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsurancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsurancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsurancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InsuranceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsurancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsurancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsurancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Insurances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Insurances = append(m.Insurances, QueryInsuranceResponse{})
			if err := m.Insurances[len(m.Insurances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Insurance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Insurance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawInsuranceRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawInsuranceRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawInsuranceRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawInsuranceRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawInsuranceRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawInsuranceRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawInsuranceRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawInsuranceRequests = append(m.WithdrawInsuranceRequests, WithdrawInsuranceRequest{})
			if err := m.WithdrawInsuranceRequests[len(m.WithdrawInsuranceRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawInsuranceRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawInsuranceRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawInsuranceRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawInsuranceRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawInsuranceRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawInsuranceRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawInsuranceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawInsuranceRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnpairingForUnstakingChunkInfosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnpairingForUnstakingChunkInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnpairingForUnstakingChunkInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queued", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Queued = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnpairingForUnstakingChunkInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnpairingForUnstakingChunkInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnpairingForUnstakingChunkInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnpairingForUnstakingChunkInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnpairingForUnstakingChunkInfos = append(m.UnpairingForUnstakingChunkInfos, UnpairingForUnstakingChunkInfo{})
			if err := m.UnpairingForUnstakingChunkInfos[len(m.UnpairingForUnstakingChunkInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnpairingForUnstakingChunkInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnpairingForUnstakingChunkInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnpairingForUnstakingChunkInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnpairingForUnstakingChunkInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnpairingForUnstakingChunkInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnpairingForUnstakingChunkInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnpairingForUnstakingChunkInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnpairingForUnstakingChunkInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedelegationInfosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedelegationInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedelegationInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedelegationInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedelegationInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedelegationInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedelegationInfos = append(m.RedelegationInfos, RedelegationInfo{})
			if err := m.RedelegationInfos[len(m.RedelegationInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedelegationInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedelegationInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedelegationInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRedelegationInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRedelegationInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRedelegationInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedelegationInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChunkSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChunkSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChunkSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChunkSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMinimumCollateralRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMinimumCollateralRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMinimumCollateralRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMinimumCollateralResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMinimumCollateralResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMinimumCollateralResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAmountState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetAmountState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
