// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/csr/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCSRsRequest is the request type for the Query/CSRs RPC method.
type QueryCSRsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCSRsRequest) Reset()         { *m = QueryCSRsRequest{} }
func (m *QueryCSRsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCSRsRequest) ProtoMessage()    {}
func (*QueryCSRsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{2}
}
func (m *QueryCSRsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRsRequest.Merge(m, src)
}
func (m *QueryCSRsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRsRequest proto.InternalMessageInfo

func (m *QueryCSRsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCSRsResponse is the response type for the Query/CSRs RPC method.
type QueryCSRsResponse struct {
	Csrs []CSR `protobuf:"bytes,1,rep,name=csrs,proto3" json:"csrs"`
	// pagination for response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCSRsResponse) Reset()         { *m = QueryCSRsResponse{} }
func (m *QueryCSRsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCSRsResponse) ProtoMessage()    {}
func (*QueryCSRsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{3}
}
func (m *QueryCSRsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRsResponse.Merge(m, src)
}
func (m *QueryCSRsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRsResponse proto.InternalMessageInfo

func (m *QueryCSRsResponse) GetCsrs() []CSR {
	if m != nil {
		return m.Csrs
	}
	return nil
}

func (m *QueryCSRsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCSRByNFTRequest is the request type for the Query/CSRByNFT RPC method.
type QueryCSRByNFTRequest struct {
	NftId uint64 `protobuf:"varint,1,opt,name=nftId,proto3" json:"nftId,omitempty"`
}

func (m *QueryCSRByNFTRequest) Reset()         { *m = QueryCSRByNFTRequest{} }
func (m *QueryCSRByNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCSRByNFTRequest) ProtoMessage()    {}
func (*QueryCSRByNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{4}
}
func (m *QueryCSRByNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRByNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRByNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRByNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRByNFTRequest.Merge(m, src)
}
func (m *QueryCSRByNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRByNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRByNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRByNFTRequest proto.InternalMessageInfo

func (m *QueryCSRByNFTRequest) GetNftId() uint64 {
	if m != nil {
		return m.NftId
	}
	return 0
}

// QueryCSRByNFTResponse is the response type for the Query/CSRByNFT RPC method.
type QueryCSRByNFTResponse struct {
	// csr object queried by nft id
	Csr CSR `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr"`
}

func (m *QueryCSRByNFTResponse) Reset()         { *m = QueryCSRByNFTResponse{} }
func (m *QueryCSRByNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCSRByNFTResponse) ProtoMessage()    {}
func (*QueryCSRByNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{5}
}
func (m *QueryCSRByNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRByNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRByNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRByNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRByNFTResponse.Merge(m, src)
}
func (m *QueryCSRByNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRByNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRByNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRByNFTResponse proto.InternalMessageInfo

func (m *QueryCSRByNFTResponse) GetCsr() CSR {
	if m != nil {
		return m.Csr
	}
	return CSR{}
}

// QueryCSRByContractRequest is the request type for the Query/CSRByContract RPC method.
type QueryCSRByContractRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryCSRByContractRequest) Reset()         { *m = QueryCSRByContractRequest{} }
func (m *QueryCSRByContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCSRByContractRequest) ProtoMessage()    {}
func (*QueryCSRByContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{6}
}
func (m *QueryCSRByContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRByContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRByContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRByContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRByContractRequest.Merge(m, src)
}
func (m *QueryCSRByContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRByContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRByContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRByContractRequest proto.InternalMessageInfo

func (m *QueryCSRByContractRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryCSRByContractResponse is the response type for the Query/CSRByContract RPC method.
type QueryCSRByContractResponse struct {
	// csr object queried by smart contract address
	Csr CSR `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr"`
}

func (m *QueryCSRByContractResponse) Reset()         { *m = QueryCSRByContractResponse{} }
func (m *QueryCSRByContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCSRByContractResponse) ProtoMessage()    {}
func (*QueryCSRByContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{7}
}
func (m *QueryCSRByContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCSRByContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCSRByContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCSRByContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCSRByContractResponse.Merge(m, src)
}
func (m *QueryCSRByContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCSRByContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCSRByContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCSRByContractResponse proto.InternalMessageInfo

func (m *QueryCSRByContractResponse) GetCsr() CSR {
	if m != nil {
		return m.Csr
	}
	return CSR{}
}

// QueryTurnstileRequest is the request type for the Query/Turnstile RPC method.
type QueryTurnstileRequest struct {
}

func (m *QueryTurnstileRequest) Reset()         { *m = QueryTurnstileRequest{} }
func (m *QueryTurnstileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTurnstileRequest) ProtoMessage()    {}
func (*QueryTurnstileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{8}
}
func (m *QueryTurnstileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTurnstileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTurnstileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTurnstileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTurnstileRequest.Merge(m, src)
}
func (m *QueryTurnstileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTurnstileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTurnstileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTurnstileRequest proto.InternalMessageInfo

// QueryTurnstileResponse is the response type for the Query/Turnstile RPC method.
type QueryTurnstileResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryTurnstileResponse) Reset()         { *m = QueryTurnstileResponse{} }
func (m *QueryTurnstileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTurnstileResponse) ProtoMessage()    {}
func (*QueryTurnstileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a845ddc1dc245388, []int{9}
}
func (m *QueryTurnstileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTurnstileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTurnstileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTurnstileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTurnstileResponse.Merge(m, src)
}
func (m *QueryTurnstileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTurnstileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTurnstileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTurnstileResponse proto.InternalMessageInfo

func (m *QueryTurnstileResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "canto.csr.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "canto.csr.v1.QueryParamsResponse")
	proto.RegisterType((*QueryCSRsRequest)(nil), "canto.csr.v1.QueryCSRsRequest")
	proto.RegisterType((*QueryCSRsResponse)(nil), "canto.csr.v1.QueryCSRsResponse")
	proto.RegisterType((*QueryCSRByNFTRequest)(nil), "canto.csr.v1.QueryCSRByNFTRequest")
	proto.RegisterType((*QueryCSRByNFTResponse)(nil), "canto.csr.v1.QueryCSRByNFTResponse")
	proto.RegisterType((*QueryCSRByContractRequest)(nil), "canto.csr.v1.QueryCSRByContractRequest")
	proto.RegisterType((*QueryCSRByContractResponse)(nil), "canto.csr.v1.QueryCSRByContractResponse")
	proto.RegisterType((*QueryTurnstileRequest)(nil), "canto.csr.v1.QueryTurnstileRequest")
	proto.RegisterType((*QueryTurnstileResponse)(nil), "canto.csr.v1.QueryTurnstileResponse")
}

func init() { proto.RegisterFile("canto/csr/v1/query.proto", fileDescriptor_a845ddc1dc245388) }

var fileDescriptor_a845ddc1dc245388 = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x4f, 0x13, 0x41,
	0x18, 0xc6, 0xbb, 0x50, 0x50, 0x5e, 0x34, 0x91, 0x71, 0x05, 0xba, 0x92, 0x6d, 0x59, 0x8d, 0xd4,
	0x3f, 0xec, 0xa4, 0x35, 0xfa, 0x01, 0xda, 0x84, 0x86, 0x0b, 0xc1, 0x85, 0x13, 0xb7, 0xe9, 0x76,
	0x59, 0x1b, 0xe8, 0xce, 0xb2, 0x33, 0x2d, 0x36, 0x84, 0x8b, 0x37, 0x13, 0x0f, 0x26, 0x7e, 0x29,
	0x8e, 0x24, 0x5e, 0xf4, 0x62, 0x4c, 0xeb, 0x07, 0x31, 0x3b, 0x33, 0x2b, 0x9d, 0xda, 0x96, 0x78,
	0xeb, 0xec, 0x3c, 0xf3, 0x3c, 0xbf, 0x77, 0xe7, 0xd9, 0xc2, 0xba, 0x4f, 0x22, 0x4e, 0xb1, 0xcf,
	0x12, 0xdc, 0xab, 0xe0, 0xb3, 0x6e, 0x90, 0xf4, 0xdd, 0x38, 0xa1, 0x9c, 0xa2, 0x7b, 0x62, 0xc7,
	0xf5, 0x59, 0xe2, 0xf6, 0x2a, 0x96, 0x19, 0xd2, 0x90, 0x8a, 0x0d, 0x9c, 0xfe, 0x92, 0x1a, 0x6b,
	0x23, 0xa4, 0x34, 0x3c, 0x0d, 0x30, 0x89, 0xdb, 0x98, 0x44, 0x11, 0xe5, 0x84, 0xb7, 0x69, 0xc4,
	0xd4, 0xee, 0x0b, 0x9f, 0xb2, 0x0e, 0x65, 0xb8, 0x49, 0x58, 0x20, 0xad, 0x71, 0xaf, 0xd2, 0x0c,
	0x38, 0xa9, 0xe0, 0x98, 0x84, 0xed, 0x48, 0x88, 0x95, 0xb6, 0xa0, 0x71, 0xc4, 0x24, 0x21, 0x9d,
	0xcc, 0x66, 0x55, 0xdb, 0x4a, 0x79, 0xc4, 0x73, 0xc7, 0x04, 0xf4, 0x2e, 0x35, 0xdd, 0x17, 0x62,
	0x2f, 0x38, 0xeb, 0x06, 0x8c, 0x3b, 0xbb, 0xf0, 0x50, 0x7b, 0xca, 0x62, 0x1a, 0xb1, 0x00, 0x55,
	0x61, 0x51, 0x9a, 0xae, 0x1b, 0x25, 0xa3, 0xbc, 0x5c, 0x35, 0xdd, 0xd1, 0xf1, 0x5c, 0xa9, 0xae,
	0xe5, 0xaf, 0x7e, 0x16, 0x73, 0x9e, 0x52, 0x3a, 0x47, 0xf0, 0x40, 0x58, 0xd5, 0x0f, 0xbc, 0xcc,
	0x1e, 0xed, 0x00, 0xdc, 0xb0, 0x2b, 0xaf, 0x67, 0xae, 0x1c, 0xd4, 0x4d, 0x07, 0x75, 0xe5, 0x3b,
	0x54, 0x83, 0xba, 0xfb, 0x24, 0x0c, 0xd4, 0x59, 0x6f, 0xe4, 0xa4, 0xf3, 0xc9, 0x80, 0x95, 0x11,
	0x73, 0x45, 0xf9, 0x12, 0xf2, 0x3e, 0x4b, 0x52, 0xc6, 0xf9, 0xf2, 0x72, 0x75, 0x45, 0x67, 0xac,
	0x1f, 0x78, 0x0a, 0x50, 0x88, 0x50, 0x43, 0x43, 0x99, 0x13, 0x28, 0x5b, 0xb7, 0xa2, 0xc8, 0x24,
	0x8d, 0xe5, 0x15, 0x98, 0x19, 0x4a, 0xad, 0xbf, 0xb7, 0x73, 0x98, 0xcd, 0x6a, 0xc2, 0x42, 0x74,
	0xcc, 0x77, 0x5b, 0x62, 0xcc, 0xbc, 0x27, 0x17, 0x4e, 0x0d, 0x1e, 0x8d, 0xa9, 0x15, 0xfc, 0x73,
	0x98, 0xf7, 0x59, 0xa2, 0xde, 0xc9, 0x54, 0xf6, 0x54, 0xe3, 0xbc, 0x81, 0xc2, 0x8d, 0x47, 0x9d,
	0x46, 0x3c, 0x21, 0x3e, 0xcf, 0x62, 0xd7, 0xe1, 0x0e, 0x69, 0xb5, 0x92, 0x80, 0xc9, 0xbb, 0x5a,
	0xf2, 0xb2, 0xa5, 0xd3, 0x00, 0x6b, 0xd2, 0xb1, 0xff, 0xcf, 0x5f, 0x53, 0x33, 0x1c, 0x76, 0x93,
	0x88, 0xf1, 0xf6, 0x69, 0x76, 0x45, 0x4e, 0x15, 0x56, 0xc7, 0x37, 0x94, 0xfb, 0x54, 0xaa, 0xea,
	0x8f, 0x3c, 0x2c, 0x88, 0x43, 0xe8, 0x04, 0x16, 0x65, 0x91, 0x50, 0x49, 0x8f, 0xff, 0xb7, 0xa7,
	0xd6, 0xe6, 0x0c, 0x85, 0x8c, 0x74, 0x36, 0x3e, 0x7e, 0xfb, 0xfd, 0x75, 0x6e, 0x15, 0x99, 0x58,
	0x7e, 0x01, 0xb2, 0xfd, 0xea, 0xe3, 0x40, 0x3e, 0xe4, 0xd3, 0xee, 0x20, 0x7b, 0x82, 0xd1, 0x48,
	0x63, 0xad, 0xe2, 0xd4, 0x7d, 0x15, 0x63, 0x89, 0x18, 0x13, 0x21, 0x3d, 0x46, 0x74, 0xac, 0x07,
	0x77, 0xb3, 0x7b, 0x46, 0xce, 0x64, 0xa3, 0xd1, 0xca, 0x58, 0x4f, 0x66, 0x6a, 0x54, 0xe0, 0xa6,
	0x08, 0x7c, 0x8c, 0x0a, 0x7a, 0x60, 0x74, 0xcc, 0xf1, 0x85, 0xe8, 0xd8, 0x25, 0xfa, 0x6c, 0xc0,
	0x7d, 0xed, 0x96, 0xd1, 0xd6, 0x34, 0xe7, 0xb1, 0xfa, 0x58, 0xe5, 0xdb, 0x85, 0x8a, 0xa3, 0x2c,
	0x38, 0x1c, 0x54, 0x1a, 0x1b, 0x5c, 0xe9, 0xf0, 0x85, 0xba, 0xe1, 0x4b, 0x74, 0x0e, 0x4b, 0x7f,
	0x1b, 0x81, 0x26, 0xcd, 0x38, 0x5e, 0x24, 0xeb, 0xe9, 0x6c, 0x91, 0x22, 0x28, 0x0a, 0x82, 0x02,
	0x5a, 0xd3, 0x09, 0x78, 0x26, 0xac, 0x35, 0xae, 0x06, 0xb6, 0x71, 0x3d, 0xb0, 0x8d, 0x5f, 0x03,
	0xdb, 0xf8, 0x32, 0xb4, 0x73, 0xd7, 0x43, 0x3b, 0xf7, 0x7d, 0x68, 0xe7, 0x8e, 0xb6, 0xc3, 0x36,
	0x7f, 0xdf, 0x6d, 0xba, 0x3e, 0xed, 0xe0, 0x7a, 0x7a, 0x78, 0x7b, 0x2f, 0xe0, 0xe7, 0x34, 0x39,
	0x91, 0x2b, 0xdc, 0x7b, 0x8b, 0x3f, 0x48, 0xb3, 0x7e, 0x1c, 0xb0, 0xe6, 0xa2, 0xf8, 0xcf, 0x7c,
	0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x44, 0x1c, 0x28, 0xf0, 0xf0, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// query all registered CSRs
	CSRs(ctx context.Context, in *QueryCSRsRequest, opts ...grpc.CallOption) (*QueryCSRsResponse, error)
	// query a specific CSR by the nftId
	CSRByNFT(ctx context.Context, in *QueryCSRByNFTRequest, opts ...grpc.CallOption) (*QueryCSRByNFTResponse, error)
	// query a CSR by smart contract address
	CSRByContract(ctx context.Context, in *QueryCSRByContractRequest, opts ...grpc.CallOption) (*QueryCSRByContractResponse, error)
	// query the turnstile address
	Turnstile(ctx context.Context, in *QueryTurnstileRequest, opts ...grpc.CallOption) (*QueryTurnstileResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CSRs(ctx context.Context, in *QueryCSRsRequest, opts ...grpc.CallOption) (*QueryCSRsResponse, error) {
	out := new(QueryCSRsResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/CSRs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CSRByNFT(ctx context.Context, in *QueryCSRByNFTRequest, opts ...grpc.CallOption) (*QueryCSRByNFTResponse, error) {
	out := new(QueryCSRByNFTResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/CSRByNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CSRByContract(ctx context.Context, in *QueryCSRByContractRequest, opts ...grpc.CallOption) (*QueryCSRByContractResponse, error) {
	out := new(QueryCSRByContractResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/CSRByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Turnstile(ctx context.Context, in *QueryTurnstileRequest, opts ...grpc.CallOption) (*QueryTurnstileResponse, error) {
	out := new(QueryTurnstileResponse)
	err := c.cc.Invoke(ctx, "/canto.csr.v1.Query/Turnstile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// query all registered CSRs
	CSRs(context.Context, *QueryCSRsRequest) (*QueryCSRsResponse, error)
	// query a specific CSR by the nftId
	CSRByNFT(context.Context, *QueryCSRByNFTRequest) (*QueryCSRByNFTResponse, error)
	// query a CSR by smart contract address
	CSRByContract(context.Context, *QueryCSRByContractRequest) (*QueryCSRByContractResponse, error)
	// query the turnstile address
	Turnstile(context.Context, *QueryTurnstileRequest) (*QueryTurnstileResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CSRs(ctx context.Context, req *QueryCSRsRequest) (*QueryCSRsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CSRs not implemented")
}
func (*UnimplementedQueryServer) CSRByNFT(ctx context.Context, req *QueryCSRByNFTRequest) (*QueryCSRByNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CSRByNFT not implemented")
}
func (*UnimplementedQueryServer) CSRByContract(ctx context.Context, req *QueryCSRByContractRequest) (*QueryCSRByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CSRByContract not implemented")
}
func (*UnimplementedQueryServer) Turnstile(ctx context.Context, req *QueryTurnstileRequest) (*QueryTurnstileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Turnstile not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CSRs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCSRsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CSRs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/CSRs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CSRs(ctx, req.(*QueryCSRsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CSRByNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCSRByNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CSRByNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/CSRByNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CSRByNFT(ctx, req.(*QueryCSRByNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CSRByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCSRByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CSRByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/CSRByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CSRByContract(ctx, req.(*QueryCSRByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Turnstile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTurnstileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Turnstile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.csr.v1.Query/Turnstile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Turnstile(ctx, req.(*QueryTurnstileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canto.csr.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CSRs",
			Handler:    _Query_CSRs_Handler,
		},
		{
			MethodName: "CSRByNFT",
			Handler:    _Query_CSRByNFT_Handler,
		},
		{
			MethodName: "CSRByContract",
			Handler:    _Query_CSRByContract_Handler,
		},
		{
			MethodName: "Turnstile",
			Handler:    _Query_Turnstile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canto/csr/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCSRsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCSRsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Csrs) > 0 {
		for iNdEx := len(m.Csrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Csrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCSRByNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRByNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRByNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NftId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NftId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCSRByNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRByNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRByNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Csr.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCSRByContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRByContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRByContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCSRByContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCSRByContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCSRByContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Csr.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTurnstileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTurnstileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTurnstileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTurnstileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTurnstileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTurnstileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCSRsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCSRsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Csrs) > 0 {
		for _, e := range m.Csrs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCSRByNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NftId != 0 {
		n += 1 + sovQuery(uint64(m.NftId))
	}
	return n
}

func (m *QueryCSRByNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Csr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCSRByContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCSRByContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Csr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTurnstileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTurnstileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Csrs = append(m.Csrs, CSR{})
			if err := m.Csrs[len(m.Csrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRByNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRByNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRByNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			m.NftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRByNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRByNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRByNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Csr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRByContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRByContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRByContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCSRByContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCSRByContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCSRByContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Csr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTurnstileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTurnstileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTurnstileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTurnstileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTurnstileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTurnstileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
