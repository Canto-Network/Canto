syntax = "proto3";
package canto.csr.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "canto/csr/v1/params.proto";
import "canto/csr/v1/csr.proto";


option go_package = "github.com/Canto-Network/Canto/v6/x/csr/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/canto/v1/csr/params";
  }
  // query all registered CSRs
  rpc CSRs(QueryCSRsRequest) returns (QueryCSRsResponse) {
    option (google.api.http).get = "/canto/v1/csr/csrs"; 
  }
  // query a specific CSR by the nftId 
  rpc CSRByNFT(QueryCSRByNFTRequest) returns (QueryCSRByNFTResponse) {
    // query by address
    option (google.api.http).get = "/canto/v1/csr/nft/{nftId}";
  }
  // query a CSR by smart contract address
  rpc CSRByContract(QueryCSRByContractRequest) returns (QueryCSRByContractResponse) { 
    // query by deployer address 
    option (google.api.http).get = "/canto/v1/csr/contract/{address}";
  }
  // query the turnstile address
  rpc Turnstile(QueryTurnstileRequest) returns (QueryTurnstileResponse) {
    option (google.api.http).get = "/canto/v1/csr/turnstile";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryCSRsRequest is the request type for the Query/CSRs RPC method.
message QueryCSRsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryCSRsResponse is the response type for the Query/CSRs RPC method.
message QueryCSRsResponse {
  repeated CSR csrs = 1 [ (gogoproto.nullable) = false ];
  // pagination for response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryCSRByNFTRequest is the request type for the Query/CSRByNFT RPC method.
message QueryCSRByNFTRequest { 
  uint64 nftId = 1; 
}

// QueryCSRByNFTResponse is the response type for the Query/CSRByNFT RPC method.
message QueryCSRByNFTResponse { 
  // csr object queried by nft id
  CSR csr = 1 [ (gogoproto.nullable) = false];
}

// QueryCSRByContractRequest is the request type for the Query/CSRByContract RPC method.
message QueryCSRByContractRequest {
  string address = 1; 
}

// QueryCSRByContractResponse is the response type for the Query/CSRByContract RPC method.
message QueryCSRByContractResponse { 
  // csr object queried by smart contract address
  CSR csr = 1 [ (gogoproto.nullable) = false];
}

// QueryTurnstileRequest is the request type for the Query/Turnstile RPC method.
message QueryTurnstileRequest {
}

// QueryTurnstileResponse is the response type for the Query/Turnstile RPC method.
message QueryTurnstileResponse {
  string address = 1;
}