syntax = "proto3";
package canto.liquidstaking.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/Canto-Network/Canto/v6/x/liquidstaking/types";

// Msg defines the liquidstaking Msg service.
service Msg {
  rpc LiquidStake(MsgLiquidStake) returns (MsgLiquidStakeResponse) {
    option (google.api.http).post = "/canto/liquidstaking/v1/tx/liquid_stake";
  };
  rpc LiquidUnstake(MsgLiquidUnstake) returns (MsgLiquidUnstakeResponse) {
    option (google.api.http).post = "/canto/liquidstaking/v1/tx/liquid_unstake";
  };
  rpc InsuranceProvide(MsgInsuranceProvide)
      returns (MsgInsuranceProvideResponse) {
    option (google.api.http).post =
        "/canto/liquidstaking/v1/tx/insurance_provide";
  };
  rpc CancelInsuranceProvide(MsgCancelInsuranceProvide)
      returns (MsgCancelInsuranceProvideResponse) {
    option (google.api.http).post =
        "/canto/liquidstaking/v1/tx/cancel_insurance_provide";
  };
  rpc DepositInsurance(MsgDepositInsurance)
      returns (MsgDepositInsuranceResponse) {
    option (google.api.http).post =
        "/canto/liquidstaking/v1/tx/deposit_insurance";
  };
  rpc WithdrawInsurance(MsgWithdrawInsurance)
      returns (MsgWithdrawInsuranceResponse) {
    option (google.api.http).post =
        "/canto/liquidstaking/v1/tx/withdraw_insurance";
  };
  // WithdrawInsuranceCommission is used to withdraw the cumulated insurance
  // commission.
  rpc WithdrawInsuranceCommission(MsgWithdrawInsuranceCommission)
      returns (MsgWithdrawInsuranceCommissionResponse) {
    option (google.api.http).post =
        "/canto/liquidstaking/v1/tx/withdraw_insurance_commission";
  };
}

message MsgLiquidStake {
  // delegator_address is the address of the user who requests the liquid
  // staking.
  string delegator_address = 1;
  // amount is the amount of native token to be liquid staked.
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

message MsgLiquidStakeResponse {}

message MsgLiquidUnstake {
  // delegator_address is the address of the user who want to liquid unstaking.
  string delegator_address = 1;
  // amount is the number calculated by (number of chunks want to unstake) *
  // chunk.size. The delegator must have corresponding ls tokens to unstake.
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

message MsgLiquidUnstakeResponse {}

message MsgInsuranceProvide {
  // provider_address is the address of the user who want to provide insurance.
  string provider_address = 1;
  // validator_address is the address of the validator to provide insurance.
  string validator_address = 2;
  // token_amount is the amount of native token to be provided as insurance.
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  // fee_rate is the fee rate of the insurance.
  string fee_rate = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgInsuranceProvideResponse {}

message MsgCancelInsuranceProvide {
  // provider_address is the address of the user who want to cancel the
  // insurance.
  string provider_address = 1;
  // id is the id of the insurance to be canceled.
  // Only pairing insurance can be canceled.
  uint64 id = 2;
}

message MsgCancelInsuranceProvideResponse {}

message MsgDepositInsurance {
  // provider_address is the address of the user who
  // want to deposit(= refill) the insurance.
  string provider_address = 1;
  // id is the id of the insurance to be refilled.
  uint64 id = 2;
  // amount is the amount of native token to be provided as insurance.
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

message MsgDepositInsuranceResponse {}

message MsgWithdrawInsurance {
  // provider_address is the address of the user who want to
  // withdraw the insurance.
  string provider_address = 1;
  // id is the id of the insurance to be withdrawn.
  uint64 id = 2;
}

message MsgWithdrawInsuranceResponse {}

message MsgWithdrawInsuranceCommission {
  // provider_address is the address of the user who want to withdraw the
  // accumulated insurance fee.
  string provider_address = 1;
  // id is the id of the insurance that accumulated fees to be withdrawn.
  uint64 id = 2;
}

message MsgWithdrawInsuranceCommissionResponse {}